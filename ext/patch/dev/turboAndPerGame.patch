diff --git a/src/citra_qt/citra_qt.cpp b/src/citra_qt/citra_qt.cpp
index d51e7183e..de8b2c84a 100644
--- a/src/citra_qt/citra_qt.cpp
+++ b/src/citra_qt/citra_qt.cpp
@@ -812,23 +812,21 @@ void GMainWindow::InitializeHotkeys() {
             ToggleFullscreen();
         }
     });
-    connect_shortcut(QStringLiteral("Toggle Per-Application Speed"), [&] {
-        if (!hotkey_registry
-                 .GetKeySequence(QStringLiteral("Main Window"), QStringLiteral("Toggle Turbo Mode"))
-                 .isEmpty()) {
-            return;
-        }
+    connect_shortcut(QStringLiteral("Toggle Per-Game Speed"), [&] {
         Settings::values.frame_limit.SetGlobal(!Settings::values.frame_limit.UsingGlobal());
+        GMainWindow::SetTurboEnabled(false);
         UpdateStatusBar();
     });
+
+    connect_shortcut(QStringLiteral("Toggle Turbo Mode"), [&] {
+        GMainWindow::SetTurboEnabled(!GMainWindow::IsTurboEnabled());
+        Settings::values.frame_limit.SetGlobal(true);
+    });
     connect_shortcut(QStringLiteral("Toggle Texture Dumping"),
                      [&] { Settings::values.dump_textures = !Settings::values.dump_textures; });
     connect_shortcut(QStringLiteral("Toggle Custom Textures"),
                      [&] { Settings::values.custom_textures = !Settings::values.custom_textures; });
 
-    connect_shortcut(QStringLiteral("Toggle Turbo Mode"),
-                     [&] { GMainWindow::SetTurboEnabled(!GMainWindow::IsTurboEnabled()); });
-
     connect_shortcut(QStringLiteral("Increase Speed Limit"), [&] { AdjustSpeedLimit(true); });
     connect_shortcut(QStringLiteral("Decrease Speed Limit"), [&] { AdjustSpeedLimit(false); });
 
diff --git a/src/citra_qt/configuration/configure_hotkeys.cpp b/src/citra_qt/configuration/configure_hotkeys.cpp
index ecaed462b..6b9443db3 100644
--- a/src/citra_qt/configuration/configure_hotkeys.cpp
+++ b/src/citra_qt/configuration/configure_hotkeys.cpp
@@ -98,38 +98,6 @@ void ConfigureHotkeys::Configure(QModelIndex index) {
     }
     const auto [key_sequence_used, used_action] = IsUsedKey(key_sequence);
 
-    // Check for turbo/per-game speed conflict. Needed to prevent the user from binding both hotkeys
-    // to the same action. Which cuases problems resetting the frame limit.to the inititla value.
-    const QString current_action =
-        model->data(model->index(index.row(), 0, index.parent())).toString();
-    const bool is_turbo = current_action == tr("Toggle Turbo Mode");
-    const bool is_per_game = current_action == tr("Toggle Per-Application Speed");
-
-    if (is_turbo || is_per_game) {
-        QString other_action =
-            is_turbo ? tr("Toggle Per-Application Speed") : tr("Toggle Turbo Mode");
-        QKeySequence other_sequence;
-
-        for (int r = 0; r < model->rowCount(); ++r) {
-            const QStandardItem* const parent = model->item(r, 0);
-            for (int r2 = 0; r2 < parent->rowCount(); ++r2) {
-                if (parent->child(r2, 0)->text() == other_action) {
-                    other_sequence = QKeySequence::fromString(
-                        parent->child(r2, hotkey_column)->text(), QKeySequence::NativeText);
-                    break;
-                }
-            }
-        }
-
-        // Show warning if either hotkey is already set
-        if (!key_sequence.isEmpty() && !other_sequence.isEmpty()) {
-            QMessageBox::warning(this, tr("Conflicting Key Sequence"),
-                                 tr("The per-application speed and turbo speed hotkeys cannot be "
-                                    "bound at the same time."));
-            return;
-        }
-    }
-
     if (key_sequence_used && key_sequence != QKeySequence(previous_key.toString())) {
         QMessageBox::warning(
             this, tr("Conflicting Key Sequence"),
