diff --git a/src/core/file_sys/ticket.cpp b/src/core/file_sys/ticket.cpp
index 76c4cbae5..fbd88d688 100644
--- a/src/core/file_sys/ticket.cpp
+++ b/src/core/file_sys/ticket.cpp
@@ -2,24 +2,24 @@
 // Licensed under GPLv2 or any later version
 // Refer to the license.txt file included.
 
-#include <algorithm>
-#include <cryptopp/aes.h>
-#include <cryptopp/modes.h>
-#include <cryptopp/sha.h>
+#include "core/file_sys/ticket.h"
 #include "common/alignment.h"
 #include "core/file_sys/certificate.h"
 #include "core/file_sys/otp.h"
 #include "core/file_sys/signature.h"
-#include "core/file_sys/ticket.h"
 #include "core/hle/service/am/am.h"
 #include "core/hw/aes/key.h"
 #include "core/hw/ecc.h"
 #include "core/hw/unique_data.h"
 #include "core/loader/loader.h"
+#include <algorithm>
+#include <cryptopp/aes.h>
+#include <cryptopp/modes.h>
+#include <cryptopp/sha.h>
 
 namespace FileSys {
-Loader::ResultStatus Ticket::DoTitlekeyFixup() {
-
+Loader::ResultStatus Ticket::DoTitlekeyFixup()
+{
     if (ticket_body.console_id == 0u) {
         // Common ticket, no need to fix up
         return Loader::ResultStatus::Success;
@@ -56,15 +56,20 @@ Loader::ResultStatus Ticket::DoTitlekeyFixup() {
     std::vector<u8> iv(0x10);
     *reinterpret_cast<u64_be*>(iv.data()) = ticket_body.ticket_id;
 
-    CryptoPP::CBC_Mode<CryptoPP::AES>::Decryption{key.data(), key.size(), iv.data()}.ProcessData(
-        ticket_body.title_key.data(), ticket_body.title_key.data(), ticket_body.title_key.size());
+    CryptoPP::CBC_Mode<CryptoPP::AES>::Decryption{key.data(), key.size(), iv.data()}
+        .ProcessData(ticket_body.title_key.data(),
+                     ticket_body.title_key.data(),
+                     ticket_body.title_key.size());
 
     return Loader::ResultStatus::Success;
 }
 
-Loader::ResultStatus Ticket::Load(std::span<const u8> file_data, std::size_t offset) {
+Loader::ResultStatus Ticket::Load(std::span<const u8> file_data, std::size_t offset)
+{
     std::size_t total_size = static_cast<std::size_t>(file_data.size() - offset);
+    /* todotodo
     serialized_size = total_size;
+*/
     if (total_size < sizeof(u32))
         return Loader::ResultStatus::Error;
 
@@ -88,6 +93,7 @@ Loader::ResultStatus Ticket::Load(std::span<const u8> file_data, std::size_t off
     std::memcpy(ticket_signature.data(), &file_data[offset + sizeof(u32)], signature_size);
     std::memcpy(&ticket_body, &file_data[offset + body_start], sizeof(Body));
 
+    /* todotodo
     std::size_t content_index_start = body_end;
     if (total_size < content_index_start + (2 * sizeof(u32)))
         return Loader::ResultStatus::Error;
@@ -106,10 +112,13 @@ Loader::ResultStatus Ticket::Load(std::span<const u8> file_data, std::size_t off
                 content_index_size);
     content_index.Load(this, content_index_vec);
 
+*/
+
     return Loader::ResultStatus::Success;
 }
 
-Loader::ResultStatus Ticket::Load(u64 title_id, u64 ticket_id) {
+Loader::ResultStatus Ticket::Load(u64 title_id, u64 ticket_id)
+{
     FileUtil::IOFile f(Service::AM::GetTicketPath(title_id, ticket_id), "rb");
     if (!f.IsOpen()) {
         return Loader::ResultStatus::Error;
@@ -121,7 +130,8 @@ Loader::ResultStatus Ticket::Load(u64 title_id, u64 ticket_id) {
     return Load(ticket_data, 0);
 }
 
-std::vector<u8> Ticket::Serialize() const {
+std::vector<u8> Ticket::Serialize() const
+{
     std::vector<u8> ret(sizeof(u32_be));
 
     *reinterpret_cast<u32_be*>(ret.data()) = signature_type;
@@ -140,7 +150,8 @@ std::vector<u8> Ticket::Serialize() const {
     return ret;
 }
 
-Loader::ResultStatus Ticket::Save(const std::string& file_path) const {
+Loader::ResultStatus Ticket::Save(const std::string& file_path) const
+{
     FileUtil::IOFile file(file_path, "wb");
     if (!file.IsOpen())
         return Loader::ResultStatus::Error;
@@ -154,7 +165,8 @@ Loader::ResultStatus Ticket::Save(const std::string& file_path) const {
     return Loader::ResultStatus::Success;
 }
 
-std::optional<std::array<u8, 16>> Ticket::GetTitleKey() const {
+std::optional<std::array<u8, 16>> Ticket::GetTitleKey() const
+{
     HW::AES::InitKeys();
     std::array<u8, 16> ctr{};
     std::memcpy(ctr.data(), &ticket_body.title_id, sizeof(u64));
@@ -165,12 +177,13 @@ std::optional<std::array<u8, 16>> Ticket::GetTitleKey() const {
     }
     auto key = HW::AES::GetNormalKey(HW::AES::KeySlotID::TicketCommonKey);
     auto title_key = ticket_body.title_key;
-    CryptoPP::CBC_Mode<CryptoPP::AES>::Decryption{key.data(), key.size(), ctr.data()}.ProcessData(
-        title_key.data(), title_key.data(), title_key.size());
+    CryptoPP::CBC_Mode<CryptoPP::AES>::Decryption{key.data(), key.size(), ctr.data()}
+        .ProcessData(title_key.data(), title_key.data(), title_key.size());
     return title_key;
 }
 
-bool Ticket::IsPersonal() const {
+bool Ticket::IsPersonal() const
+{
     if (ticket_body.console_id == 0u) {
         // Common ticket
         return false;
@@ -185,7 +198,8 @@ bool Ticket::IsPersonal() const {
     return ticket_body.console_id == otp.GetDeviceID();
 }
 
-void Ticket::ContentIndex::Initialize() {
+void Ticket::ContentIndex::Initialize()
+{
     if (!parent || initialized) {
         return;
     }
@@ -195,9 +209,9 @@ void Ticket::ContentIndex::Initialize() {
         return;
     }
     MainHeader* main_header = reinterpret_cast<MainHeader*>(content_index.data());
-    if (main_header->always1 != 1 || main_header->header_size != sizeof(MainHeader) ||
-        main_header->context_index_size != content_index.size() ||
-        main_header->index_header_size != sizeof(IndexHeader)) {
+    if (main_header->always1 != 1 || main_header->header_size != sizeof(MainHeader)
+        || main_header->context_index_size != content_index.size()
+        || main_header->index_header_size != sizeof(IndexHeader)) {
         u16 always1 = main_header->always1;
         u16 header_size = main_header->header_size;
         u32 context_index_size = main_header->context_index_size;
@@ -206,20 +220,26 @@ void Ticket::ContentIndex::Initialize() {
                   "Ticket content index has unexpected parameters title_id={}, ticket_id={}, "
                   "always1={}, header_size={}, "
                   "size={}, index_header_size={}",
-                  parent->GetTitleID(), parent->GetTicketID(), always1, header_size,
-                  context_index_size, index_header_size);
+                  parent->GetTitleID(),
+                  parent->GetTicketID(),
+                  always1,
+                  header_size,
+                  context_index_size,
+                  index_header_size);
         return;
     }
     for (u32 i = 0; i < main_header->index_headers_count; i++) {
         IndexHeader* curr_header = reinterpret_cast<IndexHeader*>(
-            content_index.data() + main_header->index_headers_offset +
-            main_header->index_header_size * i);
+            content_index.data() + main_header->index_headers_offset
+            + main_header->index_header_size * i);
         if (curr_header->type != 3 || curr_header->entry_size != sizeof(RightsField)) {
             u16 type = curr_header->type;
             LOG_WARNING(Service_FS,
                         "Found unsupported index header type, skiping... title_id={}, "
                         "ticket_id={}, type={}",
-                        parent->GetTitleID(), parent->GetTicketID(), type);
+                        parent->GetTitleID(),
+                        parent->GetTicketID(),
+                        type);
             continue;
         }
         for (u32 j = 0; j < curr_header->entry_count; j++) {
@@ -231,7 +251,8 @@ void Ticket::ContentIndex::Initialize() {
     initialized = true;
 }
 
-bool Ticket::ContentIndex::HasRights(u16 content_index) {
+bool Ticket::ContentIndex::HasRights(u16 content_index)
+{
     if (!initialized) {
         Initialize();
         if (!initialized)
diff --git a/src/core/hle/service/am/am.cpp b/src/core/hle/service/am/am.cpp
index 2f0d2f11b..d0b0aca0d 100644
--- a/src/core/hle/service/am/am.cpp
+++ b/src/core/hle/service/am/am.cpp
@@ -523,7 +523,6 @@ Result CIAFile::WriteTicket()
                 ErrorLevel::Permanent};
     }
 
-#ifdef todotodo
     const auto& ticket = container.GetTicket();
     const auto ticket_path = GetTicketPath(ticket.GetTitleID(), ticket.GetTicketID());
 
@@ -538,7 +537,6 @@ Result CIAFile::WriteTicket()
         // TODO: Correct result code.
         return FileSys::ResultFileNotFound;
     }
-#endif
 
     install_state = CIAInstallState::TicketLoaded;
     return ResultSuccess;
