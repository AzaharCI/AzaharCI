diff --git a/src/citra_qt/citra_qt.cpp b/src/citra_qt/citra_qt.cpp
index e25db1a43..4164ec98d 100644
--- a/src/citra_qt/citra_qt.cpp
+++ b/src/citra_qt/citra_qt.cpp
@@ -126,6 +126,8 @@ Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin);
 #include <SDL.h>
 #endif

+#include "core/hw/unique_data.h"
+
 constexpr int default_mouse_timeout = 2500;

 /**
@@ -1013,7 +1015,9 @@ void GMainWindow::ConnectMenuEvents() {
     connect_menu(ui->action_Load_File, &GMainWindow::OnMenuLoadFile);
     connect_menu(ui->action_Install_CIA, &GMainWindow::OnMenuInstallCIA);
     connect_menu(ui->action_Connect_Artic, &GMainWindow::OnMenuConnectArticBase);
-    connect_menu(ui->action_Setup_System_Files, &GMainWindow::OnMenuSetUpSystemFiles);
+    connect_menu(ui->action_Remove_Azahar_Encryption, &GMainWindow::OnMenuRemoveAzaharEncryption);
+    connect_menu(ui->action_Revert_Encryption_Removal, &GMainWindow::OnMenuRevertEncryptionRemoval);
+
     for (u32 region = 0; region < Core::NUM_SYSTEM_TITLE_REGIONS; region++) {
         connect_menu(ui->menu_Boot_Home_Menu->actions().at(region),
                      [this, region] { OnMenuBootHomeMenu(region); });
@@ -2148,100 +2152,6 @@ void GMainWindow::OnMenuLoadFile() {
     BootGame(filename);
 }

-void GMainWindow::OnMenuSetUpSystemFiles() {
-    QDialog dialog(this);
-    dialog.setWindowTitle(tr("Set Up System Files"));
-
-    QVBoxLayout layout(&dialog);
-
-    QLabel label_description(
-        tr("<p>Azahar needs console unique data and firmware files from a real console to be "
-           "able to use some of its features.<br>Such files and data can be set up with the <a "
-           "href=https://github.com/azahar-emu/ArticSetupTool>Azahar "
-           "Artic Setup Tool</a><br>Notes:<ul><li><b>This operation will install console unique "
-           "data to Azahar, do not share your user or nand folders<br>after performing the setup "
-           "process!</b></li><li>While doing the setup process, Azahar will link to the console "
-           "running the setup tool. You can unlink the<br>console later from the System tab in the "
-           "emulator configuration menu.</li><li>Do not go online with both Azahar and your 3DS "
-           "console at the same time after setting up system files,<br>as it could cause "
-           "issues.</li><li>Old 3DS setup is needed for the New 3DS setup to work (doing both "
-           "setup modes is recommended).</li><li>Both setup modes will work regardless of the "
-           "model of the console running the setup tool.</li></ul><hr></p>"),
-        &dialog);
-    label_description.setOpenExternalLinks(true);
-    layout.addWidget(&label_description);
-
-    QHBoxLayout layout_h(&dialog);
-    layout.addLayout(&layout_h);
-
-    QLabel label_enter(tr("Enter Azahar Artic Setup Tool address:"), &dialog);
-
-    layout_h.addWidget(&label_enter);
-
-    QLineEdit textInput(UISettings::values.last_artic_base_addr, &dialog);
-    layout_h.addWidget(&textInput);
-
-    QLabel label_select(tr("<br>Choose setup mode:"), &dialog);
-    layout.addWidget(&label_select);
-
-    std::pair<bool, bool> install_state = Core::AreSystemTitlesInstalled();
-
-    QRadioButton radio1(&dialog);
-    QRadioButton radio2(&dialog);
-    if (!install_state.first) {
-        radio1.setChecked(true);
-
-        radio1.setText(tr("(\u2139\uFE0F) Old 3DS setup"));
-        radio1.setToolTip(tr("Setup is possible."));
-
-        radio2.setText(tr("(\u26A0) New 3DS setup"));
-        radio2.setToolTip(tr("Old 3DS setup is required first."));
-        radio2.setEnabled(false);
-    } else {
-        radio1.setText(tr("(\u2705) Old 3DS setup"));
-        radio1.setToolTip(tr("Setup completed."));
-
-        if (!install_state.second) {
-            radio2.setChecked(true);
-
-            radio2.setText(tr("(\u2139\uFE0F) New 3DS setup"));
-            radio2.setToolTip(tr("Setup is possible."));
-        } else {
-            radio1.setChecked(true);
-
-            radio2.setText(tr("(\u2705) New 3DS setup"));
-            radio2.setToolTip(tr("Setup completed."));
-        }
-    }
-    layout.addWidget(&radio1);
-    layout.addWidget(&radio2);
-
-    QDialogButtonBox buttonBox(QDialogButtonBox::Ok | QDialogButtonBox::Cancel, &dialog);
-    connect(&buttonBox, &QDialogButtonBox::accepted, &dialog, &QDialog::accept);
-    connect(&buttonBox, &QDialogButtonBox::rejected, &dialog, &QDialog::reject);
-    layout.addWidget(&buttonBox);
-
-    int res = dialog.exec();
-    if (res == QDialog::Accepted) {
-        bool is_o3ds = radio1.isChecked();
-        if ((is_o3ds && install_state.first) || (!is_o3ds && install_state.second)) {
-            QMessageBox::StandardButton answer =
-                QMessageBox::question(this, tr("Set Up System Files"),
-                                      tr("The system files for the selected mode are already set "
-                                         "up.\nReinstall the files anyway?"),
-                                      QMessageBox::Yes | QMessageBox::No, QMessageBox::No);
-            if (answer != QMessageBox::Yes) {
-                return;
-            }
-        }
-        Core::UninstallSystemFiles(is_o3ds ? Core::SystemTitleSet::Old3ds
-                                           : Core::SystemTitleSet::New3ds);
-        QString addr = textInput.text();
-        UISettings::values.last_artic_base_addr = addr;
-        BootGame(QString::fromStdString(is_o3ds ? "articinio://" : "articinin://").append(addr));
-    }
-}
-
 void GMainWindow::OnMenuInstallCIA() {
     QStringList filepaths = QFileDialog::getOpenFileNames(
         this, tr("Load Files"), UISettings::values.roms_path,
@@ -2266,6 +2176,68 @@ void GMainWindow::OnMenuConnectArticBase() {
     }
 }
 
+void GMainWindow::OnMenuRemoveAzaharEncryption()
+{
+    const std::vector<std::string> paths = HW::UniqueData::GetAppFilepaths();
+
+    if (paths.size() == 0) {
+        QMessageBox::information(this, tr("Azahar"), tr("Nothing to decrypt"));
+        return;
+    }
+
+    game_list->SetDirectoryWatcherEnabled(false);
+
+    std::map<int, int> results;
+
+#ifdef _WIN32
+    QProgressDialog progress(tr("Removing Azahar encryption..."), tr("Abort"), 0, (int) paths.size(), this);
+#else
+    QProgressDialog progress(tr("Removing Azahar encryption..."), tr("Abort"), 0, paths.size(), this);
+#endif
+
+    progress.setWindowModality(Qt::WindowModal);
+
+#ifdef _WIN32
+    for (int i = 0; i < paths.size(); i++) {
+#else
+    for (size_t i = 0; i < paths.size(); i++) {
+#endif
+        progress.setValue(i);
+
+        if (progress.wasCanceled()) {
+            break;
+        }
+
+        results[HW::UniqueData::RemoveAzaharEncryption(paths[i])]++;
+    }
+
+    game_list->SetDirectoryWatcherEnabled(true);
+
+    progress.setValue((int) paths.size());
+
+    QMessageBox::information(this,
+                             tr("Azahar"),
+                             tr("%1 file(s) succesfully decrypted\n%2 file(s) file system "
+                                "errors\n%3 file(s) unable to be decrypted")
+                                 .arg(results[0])
+                                 .arg(results[1])
+                                 .arg(results[2]));
+}
+
+void GMainWindow::OnMenuRevertEncryptionRemoval()
+{
+    game_list->SetDirectoryWatcherEnabled(false);
+    int res = HW::UniqueData::RevertEncryptionRemoval();
+    game_list->SetDirectoryWatcherEnabled(true);
+
+    if (res == 0)
+        QMessageBox::information(this, tr("Azahar"), tr("Nothing to revert"));
+    else
+        QMessageBox::information(this,
+                                 tr("Azahar"),
+                                 tr("%1 file(s) successfully reverted").arg(res));
+}
+
 void GMainWindow::OnMenuBootHomeMenu(u32 region) {
     BootGame(QString::fromStdString(Core::GetHomeMenuNcchPath(region)));
 }
diff --git a/src/citra_qt/citra_qt.h b/src/citra_qt/citra_qt.h
index c8d74a131..9a4118e7d 100644
--- a/src/citra_qt/citra_qt.h
+++ b/src/citra_qt/citra_qt.h
@@ -242,9 +242,10 @@ private slots:
     void OnGameListOpenPerGameProperties(const QString& file);
     void OnConfigurePerGame();
     void OnMenuLoadFile();
-    void OnMenuSetUpSystemFiles();
     void OnMenuInstallCIA();
     void OnMenuConnectArticBase();
+    void OnMenuRemoveAzaharEncryption();
+    void OnMenuRevertEncryptionRemoval();
     void OnMenuBootHomeMenu(u32 region);
     void OnUpdateProgress(std::size_t written, std::size_t total);
     void OnCIAInstallReport(Service::AM::InstallStatus status, QString filepath);
diff --git a/src/citra_qt/main.ui b/src/citra_qt/main.ui
index 70f1915b4..449e50bdf 100644
--- a/src/citra_qt/main.ui
+++ b/src/citra_qt/main.ui
@@ -18,7 +18,7 @@
     <normaloff>dist/azahar.png</normaloff>dist/azahar.png</iconset>
   </property>
   <property name="tabShape">
-   <enum>QTabWidget::Rounded</enum>
+   <enum>QTabWidget::TabShape::Rounded</enum>
   </property>
   <property name="dockNestingEnabled">
    <bool>true</bool>
@@ -80,6 +80,9 @@
     <addaction name="action_Install_CIA"/>
     <addaction name="action_Connect_Artic"/>
     <addaction name="separator"/>
+    <addaction name="action_Remove_Azahar_Encryption"/>
+    <addaction name="action_Revert_Encryption_Removal"/>
+    <addaction name="separator"/>
     <addaction name="action_Setup_System_Files"/>
     <addaction name="menu_Boot_Home_Menu"/>
     <addaction name="separator"/>
@@ -136,20 +139,10 @@
      <property name="title">
       <string>Screen Layout</string>
      </property>
-     <addaction name="action_Screen_Layout_Default"/>
-     <addaction name="action_Screen_Layout_Single_Screen"/>
-     <addaction name="action_Screen_Layout_Large_Screen"/>
-     <addaction name="action_Screen_Layout_Side_by_Side"/>
-     <addaction name="action_Screen_Layout_Separate_Windows"/>
-     <addaction name="action_Screen_Layout_Hybrid_Screen"/>
-     <addaction name="action_Screen_Layout_Custom_Layout"/>
-     <addaction name="separator"/>
-     <addaction name="action_Screen_Layout_Upright_Screens"/>
-     <addaction name="action_Screen_Layout_Swap_Screens"/>
      <widget class="QMenu" name="menu_Small_Screen_Position">
       <property name="enabled">
-     <bool>true</bool>
-    </property>
+       <bool>true</bool>
+      </property>
       <property name="title">
        <string>Small Screen Position</string>
       </property>
@@ -162,6 +155,16 @@
       <addaction name="action_Small_Screen_Above"/>
       <addaction name="action_Small_Screen_Below"/>
      </widget>
+     <addaction name="action_Screen_Layout_Default"/>
+     <addaction name="action_Screen_Layout_Single_Screen"/>
+     <addaction name="action_Screen_Layout_Large_Screen"/>
+     <addaction name="action_Screen_Layout_Side_by_Side"/>
+     <addaction name="action_Screen_Layout_Separate_Windows"/>
+     <addaction name="action_Screen_Layout_Hybrid_Screen"/>
+     <addaction name="action_Screen_Layout_Custom_Layout"/>
+     <addaction name="separator"/>
+     <addaction name="action_Screen_Layout_Upright_Screens"/>
+     <addaction name="action_Screen_Layout_Swap_Screens"/>
      <addaction name="menu_Small_Screen_Position"/>
     </widget>
     <addaction name="action_Fullscreen"/>
@@ -238,14 +241,14 @@
    </property>
   </action>
   <action name="action_Connect_Artic">
-    <property name="text">
-      <string>Connect to Artic Base...</string>
-    </property>
+   <property name="text">
+    <string>Connect to Artic Base...</string>
+   </property>
   </action>
   <action name="action_Setup_System_Files">
-    <property name="text">
-      <string>Set Up System Files...</string>
-    </property>
+   <property name="text">
+    <string>Set Up System Files...</string>
+   </property>
   </action>
   <action name="action_Boot_Home_Menu_JPN">
    <property name="text">
@@ -329,7 +332,7 @@
     <string>About Azahar</string>
    </property>
    <property name="menuRole">
-    <enum>QAction::AboutRole</enum>
+    <enum>QAction::MenuRole::AboutRole</enum>
    </property>
   </action>
   <action name="action_Single_Window_Mode">
@@ -365,7 +368,7 @@
     <string>Configure...</string>
    </property>
    <property name="menuRole">
-    <enum>QAction::PreferencesRole</enum>
+    <enum>QAction::MenuRole::PreferencesRole</enum>
    </property>
   </action>
   <action name="action_Display_Dock_Widget_Headers">
@@ -408,12 +411,12 @@
    </property>
   </action>
   <action name="action_Close_Movie">
-   <property name="text">
-    <string>Close</string>
-   </property>
    <property name="enabled">
     <bool>false</bool>
    </property>
+   <property name="text">
+    <string>Close</string>
+   </property>
   </action>
   <action name="action_Save_Movie">
    <property name="enabled">
@@ -689,9 +692,19 @@
     <string>Configure Current Application...</string>
    </property>
    <property name="menuRole">
-    <enum>QAction::NoRole</enum>
+    <enum>QAction::MenuRole::NoRole</enum>
    </property>
   </action>
+  <action name="action_Remove_Azahar_Encryption">
+   <property name="text">
+    <string>Remove Azahar Encryption</string>
+   </property>
+  </action>
+  <action name="action_Revert_Encryption_Removal">Add commentMore actions
+    <property name="text">
+      <string>Revert Encryption Removal</string>
+    </property>
+  </action>
  </widget>
  <resources/>
  <connections/>
diff --git a/src/core/file_sys/ncch_container.cpp b/src/core/file_sys/ncch_container.cpp
index 0739ac4c0..712ae437a 100644
--- a/src/core/file_sys/ncch_container.cpp
+++ b/src/core/file_sys/ncch_container.cpp
@@ -2,29 +2,30 @@
 // Licensed under GPLv2 or any later version
 // Refer to the license.txt file included.

-#include <cstring>
-#include <memory>
-#include <span>
-#include <cryptopp/aes.h>
-#include <cryptopp/modes.h>
-#include <cryptopp/sha.h>
+#include "core/file_sys/ncch_container.h"
 #include "common/common_types.h"
 #include "common/logging/log.h"
 #include "core/core.h"
 #include "core/file_sys/layered_fs.h"
-#include "core/file_sys/ncch_container.h"
 #include "core/file_sys/patch.h"
 #include "core/file_sys/seed_db.h"
 #include "core/hw/aes/key.h"
 #include "core/hw/unique_data.h"
 #include "core/loader/loader.h"
+#include <cryptopp/aes.h>
+#include <cryptopp/modes.h>
+#include <cryptopp/sha.h>
+#include <cstring>
+#include <memory>
+#include <span>

 namespace FileSys {

 static const int kMaxSections = 8;   ///< Maximum number of sections (files) in an ExeFs
 static const int kBlockSize = 0x200; ///< Size of ExeFS blocks (in bytes)

-u64 GetModId(u64 program_id) {
+u64 GetModId(u64 program_id)
+{
     constexpr u64 UPDATE_MASK = 0x0000000e'00000000;
     if ((program_id & 0x000000ff'00000000) == UPDATE_MASK) { // Apply the mods to updates
         return program_id & ~UPDATE_MASK;
@@ -38,7 +39,8 @@ u64 GetModId(u64 program_id) {
  * @param size Size of compressed buffer
  * @return Size of decompressed buffer
  */
-static std::size_t LZSS_GetDecompressedSize(std::span<const u8> buffer) {
+static std::size_t LZSS_GetDecompressedSize(std::span<const u8> buffer)
+{
     u32 offset_size;
     std::memcpy(&offset_size, buffer.data() + buffer.size() - sizeof(u32), sizeof(u32));
     return offset_size + buffer.size();
@@ -52,7 +54,8 @@ static std::size_t LZSS_GetDecompressedSize(std::span<const u8> buffer) {
  * @param decompressed_size Size of decompressed buffer
  * @return True on success, otherwise false
  */
-static bool LZSS_Decompress(std::span<const u8> compressed, std::span<u8> decompressed) {
+static bool LZSS_Decompress(std::span<const u8> compressed, std::span<u8> decompressed)
+{
     const u8* footer = compressed.data() + compressed.size() - 8;

     u32 buffer_top_and_bottom;
@@ -112,12 +115,17 @@ static bool LZSS_Decompress(std::span<const u8> compressed, std::span<u8> decomp
 }

 NCCHContainer::NCCHContainer(const std::string& filepath, u32 ncch_offset, u32 partition)
-    : ncch_offset(ncch_offset), partition(partition), filepath(filepath) {
+    : ncch_offset(ncch_offset)
+    , partition(partition)
+    , filepath(filepath)
+{
     file = std::make_unique<FileUtil::IOFile>(filepath, "rb");
 }

-Loader::ResultStatus NCCHContainer::OpenFile(const std::string& filepath_, u32 ncch_offset_,
-                                             u32 partition_) {
+Loader::ResultStatus NCCHContainer::OpenFile(const std::string& filepath_,
+                                             u32 ncch_offset_,
+                                             u32 partition_)
+{
     filepath = filepath_;
     ncch_offset = ncch_offset_;
     partition = partition_;
@@ -132,14 +140,13 @@ Loader::ResultStatus NCCHContainer::OpenFile(const std::string& filepath_, u32 n
     return Loader::ResultStatus::Success;
 }

-Loader::ResultStatus NCCHContainer::LoadHeader() {
+Loader::ResultStatus NCCHContainer::LoadHeader()
+{
     if (has_header) {
         return Loader::ResultStatus::Success;
     }

-#ifdef todotodo
     for (int i = 0; i < 2; i++) {
-#endif
         if (!file->IsOpen()) {
             return Loader::ResultStatus::Error;
         }
@@ -166,22 +173,17 @@ Loader::ResultStatus NCCHContainer::LoadHeader() {

         // Verify we are loading the correct file type...
         if (Loader::MakeMagic('N', 'C', 'C', 'H') != ncch_header.magic) {
-#ifdef todotodo
             // We may be loading a crypto file, try again
             if (i == 0) {
                 file.reset();
-                file = HW::UniqueData::OpenUniqueCryptoFile(
-                    filepath, "rb", HW::UniqueData::UniqueCryptoFileID::NCCH);
+                file = HW::UniqueData::OpenUniqueCryptoFile(filepath,
+                                                            "rb",
+                                                            HW::UniqueData::UniqueCryptoFileID::NCCH);
             } else {
                 return Loader::ResultStatus::ErrorInvalidFormat;
             }
-#else
-            return Loader::ResultStatus::ErrorInvalidFormat;
-#endif
         }
-#ifdef todotodo
     }
-#endif

     if (file->IsCrypto()) {
         LOG_DEBUG(Service_FS, "NCCH file has console unique crypto");
@@ -191,7 +193,8 @@ Loader::ResultStatus NCCHContainer::LoadHeader() {
     return Loader::ResultStatus::Success;
 }

-Loader::ResultStatus NCCHContainer::Load() {
+Loader::ResultStatus NCCHContainer::Load()
+{
     if (is_loaded)
         return Loader::ResultStatus::Success;

@@ -200,9 +203,7 @@ Loader::ResultStatus NCCHContainer::Load() {
     if (file->IsOpen()) {
         size_t file_size;

-#ifdef todotodo
         for (int i = 0; i < 2; i++) {
-#endif
             file_size = file->GetSize();

             // Reset read pointer in case this file has been read before.
@@ -225,7 +226,6 @@ Loader::ResultStatus NCCHContainer::Load() {

             // Verify we are loading the correct file type...
             if (Loader::MakeMagic('N', 'C', 'C', 'H') != ncch_header.magic) {
-#ifdef todotodo
                 // We may be loading a crypto file, try again
                 if (i == 0) {
                     file = HW::UniqueData::OpenUniqueCryptoFile(
@@ -233,13 +233,8 @@ Loader::ResultStatus NCCHContainer::Load() {
                 } else {
                     return Loader::ResultStatus::ErrorInvalidFormat;
                 }
-#else
-            return Loader::ResultStatus::ErrorInvalidFormat;
-#endif
             }
-#ifdef todotodo
         }
-#endif

         if (file->IsCrypto()) {
             LOG_DEBUG(Service_FS, "NCCH file has console unique crypto");
@@ -260,7 +255,8 @@ Loader::ResultStatus NCCHContainer::Load() {
                 InitKeys();
                 std::array<u8, 16> key_y_primary, key_y_secondary;

-                std::copy(ncch_header.signature, ncch_header.signature + key_y_primary.size(),
+                std::copy(ncch_header.signature,
+                          ncch_header.signature + key_y_primary.size(),
                           key_y_primary.begin());

                 if (!ncch_header.seed_crypto) {
@@ -268,7 +264,8 @@ Loader::ResultStatus NCCHContainer::Load() {
                 } else {
                     auto opt{FileSys::GetSeed(ncch_header.program_id)};
                     if (!opt.has_value()) {
-                        LOG_ERROR(Service_FS, "Seed for program {:016X} not found",
+                        LOG_ERROR(Service_FS,
+                                  "Seed for program {:016X} not found",
                                   ncch_header.program_id);
                         failed_to_decrypt = true;
                     } else {
@@ -337,7 +334,8 @@ Loader::ResultStatus NCCHContainer::Load() {
                 LOG_DEBUG(Loader, "NCCH version 0/2");
                 // In this version, CTR for each section is a magic number prefixed by partition ID
                 // (reverse order)
-                std::reverse_copy(ncch_header.partition_id, ncch_header.partition_id + 8,
+                std::reverse_copy(ncch_header.partition_id,
+                                  ncch_header.partition_id + 8,
                                   exheader_ctr.begin());
                 exefs_ctr = romfs_ctr = exheader_ctr;
                 exheader_ctr[8] = 1;
@@ -347,7 +345,8 @@ Loader::ResultStatus NCCHContainer::Load() {
                 LOG_DEBUG(Loader, "NCCH version 1");
                 // In this version, CTR for each section is the section offset prefixed by partition
                 // ID, as if the entire NCCH image is encrypted using a single CTR stream.
-                std::copy(ncch_header.partition_id, ncch_header.partition_id + 8,
+                std::copy(ncch_header.partition_id,
+                          ncch_header.partition_id + 8,
                           exheader_ctr.begin());
                 exefs_ctr = romfs_ctr = exheader_ctr;
                 auto u32ToBEArray = [](u32 value) -> std::array<u8, 4> {
@@ -361,8 +360,7 @@ Loader::ResultStatus NCCHContainer::Load() {
                 auto offset_exheader = u32ToBEArray(0x200); // exheader offset
                 auto offset_exefs = u32ToBEArray(ncch_header.exefs_offset * kBlockSize);
                 auto offset_romfs = u32ToBEArray(ncch_header.romfs_offset * kBlockSize);
-                std::copy(offset_exheader.begin(), offset_exheader.end(),
-                          exheader_ctr.begin() + 12);
+                std::copy(offset_exheader.begin(), offset_exheader.end(), exheader_ctr.begin() + 12);
                 std::copy(offset_exefs.begin(), offset_exefs.end(), exefs_ctr.begin() + 12);
                 std::copy(offset_romfs.begin(), offset_romfs.end(), romfs_ctr.begin() + 12);
             } else {
@@ -402,10 +400,11 @@ Loader::ResultStatus NCCHContainer::Load() {
             if (is_encrypted) {
                 // This ID check is masked to low 32-bit as a toleration to ill-formed ROM created
                 // by merging games and its updates.
-                if ((exheader_header.system_info.jump_id & 0xFFFFFFFF) ==
-                    (ncch_header.program_id & 0xFFFFFFFF)) {
-                    LOG_WARNING(Service_FS, "NCCH is marked as encrypted but with decrypted "
-                                            "exheader. Force no crypto scheme.");
+                if ((exheader_header.system_info.jump_id & 0xFFFFFFFF)
+                    == (ncch_header.program_id & 0xFFFFFFFF)) {
+                    LOG_WARNING(Service_FS,
+                                "NCCH is marked as encrypted but with decrypted "
+                                "exheader. Force no crypto scheme.");
                     is_encrypted = false;
                 } else {
                     if (failed_to_decrypt) {
@@ -413,15 +412,16 @@ Loader::ResultStatus NCCHContainer::Load() {
                         return Loader::ResultStatus::ErrorEncrypted;
                     }
                     CryptoPP::byte* data = reinterpret_cast<CryptoPP::byte*>(&exheader_header);
-                    CryptoPP::CTR_Mode<CryptoPP::AES>::Decryption(
-                        primary_key.data(), primary_key.size(), exheader_ctr.data())
+                    CryptoPP::CTR_Mode<CryptoPP::AES>::Decryption(primary_key.data(),
+                                                                  primary_key.size(),
+                                                                  exheader_ctr.data())
                         .ProcessData(data, data, sizeof(exheader_header));
                 }
             }

-            const auto mods_path =
-                fmt::format("{}mods/{:016X}/", FileUtil::GetUserPath(FileUtil::UserPath::LoadDir),
-                            GetModId(ncch_header.program_id));
+            const auto mods_path = fmt::format("{}mods/{:016X}/",
+                                               FileUtil::GetUserPath(FileUtil::UserPath::LoadDir),
+                                               GetModId(ncch_header.program_id));
             const std::array<std::string, 2> exheader_override_paths{{
                 mods_path + "exheader.bin",
                 filepath + ".exheader",
@@ -436,10 +436,11 @@ Loader::ResultStatus NCCHContainer::Load() {
                 }
             }
             if (has_exheader_override) {
-                if (exheader_header.system_info.jump_id !=
-                    exheader_header.arm11_system_local_caps.program_id) {
-                    LOG_WARNING(Service_FS, "Jump ID and Program ID don't match. "
-                                            "The override exheader might not be decrypted.");
+                if (exheader_header.system_info.jump_id
+                    != exheader_header.arm11_system_local_caps.program_id) {
+                    LOG_WARNING(Service_FS,
+                                "Jump ID and Program ID don't match. "
+                                "The override exheader might not be decrypted.");
                 }
                 is_tainted = true;
             }
@@ -456,10 +457,11 @@ Loader::ResultStatus NCCHContainer::Load() {
             u32 bss_size = exheader_header.codeset_info.bss_size;
             u32 core_version = exheader_header.arm11_system_local_caps.core_version;
             u8 priority = exheader_header.arm11_system_local_caps.priority;
-            u8 resource_limit_category =
-                exheader_header.arm11_system_local_caps.resource_limit_category;
+            u8 resource_limit_category = exheader_header.arm11_system_local_caps
+                                             .resource_limit_category;

-            LOG_DEBUG(Service_FS, "Name:                        {}",
+            LOG_DEBUG(Service_FS,
+                      "Name:                        {}",
                       reinterpret_cast<const char*>(exheader_header.codeset_info.name));
             LOG_DEBUG(Service_FS, "Program ID:                  {:016X}", ncch_header.program_id);
             LOG_DEBUG(Service_FS, "Code compressed:             {}", is_compressed ? "yes" : "no");
@@ -470,7 +472,8 @@ Loader::ResultStatus NCCHContainer::Load() {
             LOG_DEBUG(Service_FS, "Core version:                {}", core_version);
             LOG_DEBUG(Service_FS, "Thread priority:             0x{:X}", priority);
             LOG_DEBUG(Service_FS, "Resource limit category:     {}", resource_limit_category);
-            LOG_DEBUG(Service_FS, "System Mode:                 {}",
+            LOG_DEBUG(Service_FS,
+                      "System Mode:                 {}",
                       static_cast<int>(exheader_header.arm11_system_local_caps.system_mode));

             has_exheader = true;
@@ -488,24 +491,23 @@ Loader::ResultStatus NCCHContainer::Load() {
             if (file->ReadBytes(&exefs_header, sizeof(ExeFs_Header)) != sizeof(ExeFs_Header))
                 return Loader::ResultStatus::Error;

-#ifdef todotodo
             if (file->IsCrypto()) {
-                exefs_file = HW::UniqueData::OpenUniqueCryptoFile(
-                    filepath, "rb", HW::UniqueData::UniqueCryptoFileID::NCCH);
+                exefs_file
+                    = HW::UniqueData::OpenUniqueCryptoFile(filepath,
+                                                           "rb",
+                                                           HW::UniqueData::UniqueCryptoFileID::NCCH);
             } else {
-                exefs_file = std::make_unique<FileUtil::IOFile>(filepath, "rb");
-            }
+                if (is_encrypted) {
+                    CryptoPP::byte* data = reinterpret_cast<CryptoPP::byte*>(&exefs_header);
+                    CryptoPP::CTR_Mode<CryptoPP::AES>::Decryption(primary_key.data(),
+                                                                  primary_key.size(),
+                                                                  exefs_ctr.data())
+                        .ProcessData(data, data, sizeof(exefs_header));
+                }

-#else
-            if (is_encrypted) {
-                CryptoPP::byte* data = reinterpret_cast<CryptoPP::byte*>(&exefs_header);
-                CryptoPP::CTR_Mode<CryptoPP::AES>::Decryption(primary_key.data(),
-                                                              primary_key.size(), exefs_ctr.data())
-                    .ProcessData(data, data, sizeof(exefs_header));
+                exefs_file = std::make_unique<FileUtil::IOFile>(filepath, "rb");
             }

-            exefs_file = std::make_unique<FileUtil::IOFile>(filepath, "rb");
-#endif
             has_exefs = true;
         }

@@ -523,7 +525,8 @@ Loader::ResultStatus NCCHContainer::Load() {
     return Loader::ResultStatus::Success;
 }

-Loader::ResultStatus NCCHContainer::LoadOverrides() {
+Loader::ResultStatus NCCHContainer::LoadOverrides()
+{
     // Check for split-off files, mark the archive as tainted if we will use them
     std::string romfs_override = filepath + ".romfs";
     if (FileUtil::Exists(romfs_override)) {
@@ -543,8 +546,10 @@ Loader::ResultStatus NCCHContainer::LoadOverrides() {
             has_exefs = true;
         } else {
             if (file->IsCrypto()) {
-                exefs_file = HW::UniqueData::OpenUniqueCryptoFile(
-                    filepath, "rb", HW::UniqueData::UniqueCryptoFileID::NCCH);
+                exefs_file
+                    = HW::UniqueData::OpenUniqueCryptoFile(filepath,
+                                                           "rb",
+                                                           HW::UniqueData::UniqueCryptoFileID::NCCH);
             } else {
                 exefs_file = std::make_unique<FileUtil::IOFile>(filepath, "rb");
             }
@@ -561,7 +566,8 @@ Loader::ResultStatus NCCHContainer::LoadOverrides() {
     return Loader::ResultStatus::Success;
 }

-Loader::ResultStatus NCCHContainer::LoadSectionExeFS(const char* name, std::vector<u8>& buffer) {
+Loader::ResultStatus NCCHContainer::LoadSectionExeFS(const char* name, std::vector<u8>& buffer)
+{
     Loader::ResultStatus result = Load();
     if (result != Loader::ResultStatus::Success)
         return result;
@@ -625,12 +631,16 @@ Loader::ResultStatus NCCHContainer::LoadSectionExeFS(const char* name, std::vect

         // Load the specified section...
         if (strcmp(section.name, name) == 0) {
-            LOG_DEBUG(Service_FS, "{} - offset: 0x{:08X}, size: 0x{:08X}, name: {}", section_number,
-                      section.offset, section.size, section.name);
-
-            s64 section_offset =
-                is_proto ? section.offset
-                         : (section.offset + exefs_offset + sizeof(ExeFs_Header) + ncch_offset);
+            LOG_DEBUG(Service_FS,
+                      "{} - offset: 0x{:08X}, size: 0x{:08X}, name: {}",
+                      section_number,
+                      section.offset,
+                      section.size,
+                      section.name);
+
+            s64 section_offset = is_proto ? section.offset
+                                          : (section.offset + exefs_offset + sizeof(ExeFs_Header)
+                                             + ncch_offset);
             exefs_file->Seek(section_offset, SEEK_SET);

             std::array<u8, 16> key;
@@ -640,7 +650,8 @@ Loader::ResultStatus NCCHContainer::LoadSectionExeFS(const char* name, std::vect
                 key = secondary_key;
             }

-            CryptoPP::CTR_Mode<CryptoPP::AES>::Decryption dec(key.data(), key.size(),
+            CryptoPP::CTR_Mode<CryptoPP::AES>::Decryption dec(key.data(),
+                                                              key.size(),
                                                               exefs_ctr.data());
             dec.Seek(section.offset + sizeof(ExeFs_Header));

@@ -649,8 +660,8 @@ Loader::ResultStatus NCCHContainer::LoadSectionExeFS(const char* name, std::vect
             if (strcmp(section.name, ".code") == 0 && is_compressed) {
                 // Section is compressed, read compressed .code section...
                 std::vector<u8> temp_buffer(section_size);
-                if (exefs_file->ReadBytes(temp_buffer.data(), temp_buffer.size()) !=
-                    temp_buffer.size())
+                if (exefs_file->ReadBytes(temp_buffer.data(), temp_buffer.size())
+                    != temp_buffer.size())
                     return Loader::ResultStatus::Error;

                 if (is_encrypted) {
@@ -678,28 +689,30 @@ Loader::ResultStatus NCCHContainer::LoadSectionExeFS(const char* name, std::vect
     return Loader::ResultStatus::ErrorNotUsed;
 }

-Loader::ResultStatus NCCHContainer::ApplyCodePatch(std::vector<u8>& code) const {
-    struct PatchLocation {
+Loader::ResultStatus NCCHContainer::ApplyCodePatch(std::vector<u8>& code) const
+{
+    struct PatchLocation
+    {
         std::string path;
         bool (*patch_fn)(const std::vector<u8>& patch, std::vector<u8>& code);
     };

-    const auto mods_path =
-        fmt::format("{}mods/{:016X}/", FileUtil::GetUserPath(FileUtil::UserPath::LoadDir),
-                    GetModId(ncch_header.program_id));
+    const auto mods_path = fmt::format("{}mods/{:016X}/",
+                                       FileUtil::GetUserPath(FileUtil::UserPath::LoadDir),
+                                       GetModId(ncch_header.program_id));

     constexpr u32 system_module_tid_high = 0x00040130;

     std::string luma_ips_location;
-    if ((static_cast<u32>(ncch_header.program_id >> 32) & system_module_tid_high) ==
-        system_module_tid_high) {
-        luma_ips_location =
-            fmt::format("{}luma/sysmodules/{:016X}.ips",
-                        FileUtil::GetUserPath(FileUtil::UserPath::SDMCDir), ncch_header.program_id);
+    if ((static_cast<u32>(ncch_header.program_id >> 32) & system_module_tid_high)
+        == system_module_tid_high) {
+        luma_ips_location = fmt::format("{}luma/sysmodules/{:016X}.ips",
+                                        FileUtil::GetUserPath(FileUtil::UserPath::SDMCDir),
+                                        ncch_header.program_id);
     } else {
-        luma_ips_location =
-            fmt::format("{}luma/titles/{:016X}/code.ips",
-                        FileUtil::GetUserPath(FileUtil::UserPath::SDMCDir), ncch_header.program_id);
+        luma_ips_location = fmt::format("{}luma/titles/{:016X}/code.ips",
+                                        FileUtil::GetUserPath(FileUtil::UserPath::SDMCDir),
+                                        ncch_header.program_id);
     }
     const std::array<PatchLocation, 7> patch_paths{{
         {mods_path + "exefs/code.ips", Patch::ApplyIpsPatch},
@@ -730,7 +743,8 @@ Loader::ResultStatus NCCHContainer::ApplyCodePatch(std::vector<u8>& code) const
 }

 Loader::ResultStatus NCCHContainer::LoadOverrideExeFSSection(const char* name,
-                                                             std::vector<u8>& buffer) {
+                                                             std::vector<u8>& buffer)
+{
     std::string override_name;

     // Map our section name to the extracted equivalent
@@ -745,9 +759,9 @@ Loader::ResultStatus NCCHContainer::LoadOverrideExeFSSection(const char* name,
     else
         return Loader::ResultStatus::Error;

-    const auto mods_path =
-        fmt::format("{}mods/{:016X}/", FileUtil::GetUserPath(FileUtil::UserPath::LoadDir),
-                    GetModId(ncch_header.program_id));
+    const auto mods_path = fmt::format("{}mods/{:016X}/",
+                                       FileUtil::GetUserPath(FileUtil::UserPath::LoadDir),
+                                       GetModId(ncch_header.program_id));
     const std::array<std::string, 3> override_paths{{
         mods_path + "exefs/" + override_name,
         mods_path + override_name,
@@ -772,7 +786,8 @@ Loader::ResultStatus NCCHContainer::LoadOverrideExeFSSection(const char* name,
 }

 Loader::ResultStatus NCCHContainer::ReadRomFS(std::shared_ptr<RomFSReader>& romfs_file,
-                                              bool use_layered_fs) {
+                                              bool use_layered_fs)
+{
     Loader::ResultStatus result = Load();
     if (result != Loader::ResultStatus::Success)
         return result;
@@ -801,42 +816,44 @@ Loader::ResultStatus NCCHContainer::ReadRomFS(std::shared_ptr<RomFSReader>& romf

     // We reopen the file, to allow its position to be independent from file's
     std::unique_ptr<FileUtil::IOFile> romfs_file_inner;
-#ifdef todotodo
     if (file->IsCrypto()) {
-        romfs_file_inner = HW::UniqueData::OpenUniqueCryptoFile(
-            filepath, "rb", HW::UniqueData::UniqueCryptoFileID::NCCH);
+        romfs_file_inner
+            = HW::UniqueData::OpenUniqueCryptoFile(filepath,
+                                                   "rb",
+                                                   HW::UniqueData::UniqueCryptoFileID::NCCH);
     } else {
         romfs_file_inner = std::make_unique<FileUtil::IOFile>(filepath, "rb");
     }
-#else
-    romfs_file_inner = std::make_unique<FileUtil::IOFile>(filepath, "rb");
-#endif

     if (!romfs_file_inner->IsOpen())
         return Loader::ResultStatus::Error;

 #ifdef todotodo
-    std::shared_ptr<RomFSReader> direct_romfs =
-        std::make_shared<DirectRomFSReader>(std::move(romfs_file_inner), romfs_offset, romfs_size);
+    std::shared_ptr<RomFSReader> direct_romfs
+        = std::make_shared<DirectRomFSReader>(std::move(romfs_file_inner), romfs_offset, romfs_size);
 #else
     std::shared_ptr<RomFSReader> direct_romfs;
     if (is_encrypted) {
-        direct_romfs =
-            std::make_shared<DirectRomFSReader>(std::move(romfs_file_inner), romfs_offset,
-                                                romfs_size, secondary_key, romfs_ctr, 0x1000);
+        direct_romfs = std::make_shared<DirectRomFSReader>(std::move(romfs_file_inner),
+                                                           romfs_offset,
+                                                           romfs_size,
+                                                           secondary_key,
+                                                           romfs_ctr,
+                                                           0x1000);
     } else {
         direct_romfs = std::make_shared<DirectRomFSReader>(std::move(romfs_file_inner),
-                                                           romfs_offset, romfs_size);
+                                                           romfs_offset,
+                                                           romfs_size);
     }
 #endif

-    const auto path =
-        fmt::format("{}mods/{:016X}/", FileUtil::GetUserPath(FileUtil::UserPath::LoadDir),
-                    GetModId(ncch_header.program_id));
-    if (!is_proto && use_layered_fs &&
-        (FileUtil::Exists(path + "romfs/") || FileUtil::Exists(path + "romfs_ext/"))) {
-
-        romfs_file = std::make_shared<LayeredFS>(std::move(direct_romfs), path + "romfs/",
+    const auto path = fmt::format("{}mods/{:016X}/",
+                                  FileUtil::GetUserPath(FileUtil::UserPath::LoadDir),
+                                  GetModId(ncch_header.program_id));
+    if (!is_proto && use_layered_fs
+        && (FileUtil::Exists(path + "romfs/") || FileUtil::Exists(path + "romfs_ext/"))) {
+        romfs_file = std::make_shared<LayeredFS>(std::move(direct_romfs),
+                                                 path + "romfs/",
                                                  path + "romfs_ext/");
     } else {
         romfs_file = std::move(direct_romfs);
@@ -845,7 +862,8 @@ Loader::ResultStatus NCCHContainer::ReadRomFS(std::shared_ptr<RomFSReader>& romf
     return Loader::ResultStatus::Success;
 }

-Loader::ResultStatus NCCHContainer::DumpRomFS(const std::string& target_path) {
+Loader::ResultStatus NCCHContainer::DumpRomFS(const std::string& target_path)
+{
 #ifdef todotodo
     if (file->IsCrypto())
         return Loader::ResultStatus::ErrorEncrypted;
@@ -856,8 +874,10 @@ Loader::ResultStatus NCCHContainer::DumpRomFS(const std::string& target_path) {
     if (result != Loader::ResultStatus::Success)
         return result;

-    std::shared_ptr<LayeredFS> layered_fs =
-        std::make_shared<LayeredFS>(std::move(direct_romfs), "", "", false);
+    std::shared_ptr<LayeredFS> layered_fs = std::make_shared<LayeredFS>(std::move(direct_romfs),
+                                                                        "",
+                                                                        "",
+                                                                        false);

     if (!layered_fs->DumpRomFS(target_path)) {
         return Loader::ResultStatus::Error;
@@ -865,16 +885,19 @@ Loader::ResultStatus NCCHContainer::DumpRomFS(const std::string& target_path) {
     return Loader::ResultStatus::Success;
 }

-Loader::ResultStatus NCCHContainer::ReadOverrideRomFS(std::shared_ptr<RomFSReader>& romfs_file) {
+Loader::ResultStatus NCCHContainer::ReadOverrideRomFS(std::shared_ptr<RomFSReader>& romfs_file)
+{
     // Check for RomFS overrides
     std::string split_filepath = filepath + ".romfs";
     if (FileUtil::Exists(split_filepath)) {
-        std::unique_ptr<FileUtil::IOFile> romfs_file_inner =
-            std::make_unique<FileUtil::IOFile>(split_filepath, "rb");
+        std::unique_ptr<FileUtil::IOFile> romfs_file_inner
+            = std::make_unique<FileUtil::IOFile>(split_filepath, "rb");
         if (romfs_file_inner->IsOpen()) {
-            LOG_WARNING(Service_FS, "File {} overriding built-in RomFS; LayeredFS not enabled",
+            LOG_WARNING(Service_FS,
+                        "File {} overriding built-in RomFS; LayeredFS not enabled",
                         split_filepath);
-            romfs_file = std::make_shared<DirectRomFSReader>(std::move(romfs_file_inner), 0,
+            romfs_file = std::make_shared<DirectRomFSReader>(std::move(romfs_file_inner),
+                                                             0,
                                                              romfs_file_inner->GetSize());
             return Loader::ResultStatus::Success;
         }
@@ -883,7 +906,8 @@ Loader::ResultStatus NCCHContainer::ReadOverrideRomFS(std::shared_ptr<RomFSReade
     return Loader::ResultStatus::ErrorNotUsed;
 }

-Loader::ResultStatus NCCHContainer::ReadProgramId(u64_le& program_id) {
+Loader::ResultStatus NCCHContainer::ReadProgramId(u64_le& program_id)
+{
     Loader::ResultStatus result = LoadHeader();
     if (result != Loader::ResultStatus::Success)
         return result;
@@ -895,7 +919,8 @@ Loader::ResultStatus NCCHContainer::ReadProgramId(u64_le& program_id) {
     return Loader::ResultStatus::Success;
 }

-Loader::ResultStatus NCCHContainer::ReadExtdataId(u64& extdata_id) {
+Loader::ResultStatus NCCHContainer::ReadExtdataId(u64& extdata_id)
+{
     Loader::ResultStatus result = Load();
     if (result != Loader::ResultStatus::Success)
         return result;
@@ -930,7 +955,8 @@ Loader::ResultStatus NCCHContainer::ReadExtdataId(u64& extdata_id) {
     return Loader::ResultStatus::Success;
 }

-bool NCCHContainer::HasExeFS() {
+bool NCCHContainer::HasExeFS()
+{
     Loader::ResultStatus result = Load();
     if (result != Loader::ResultStatus::Success)
         return false;
@@ -938,7 +964,8 @@ bool NCCHContainer::HasExeFS() {
     return has_exefs;
 }

-bool NCCHContainer::HasRomFS() {
+bool NCCHContainer::HasRomFS()
+{
     Loader::ResultStatus result = Load();
     if (result != Loader::ResultStatus::Success)
         return false;
@@ -946,7 +973,8 @@ bool NCCHContainer::HasRomFS() {
     return has_romfs;
 }

-bool NCCHContainer::HasExHeader() {
+bool NCCHContainer::HasExHeader()
+{
     Loader::ResultStatus result = Load();
     if (result != Loader::ResultStatus::Success)
         return false;
diff --git a/src/core/hw/unique_data.cpp b/src/core/hw/unique_data.cpp
index 8d7ac9035..9250df1b4 100644
--- a/src/core/hw/unique_data.cpp
+++ b/src/core/hw/unique_data.cpp
@@ -2,23 +2,27 @@
 // Licensed under GPLv2 or any later version
 // Refer to the license.txt file included.

-#include <cryptopp/sha.h>
+#include "core/hw/unique_data.h"
 #include "common/common_paths.h"
 #include "common/logging/log.h"
 #include "core/file_sys/archive_systemsavedata.h"
 #include "core/file_sys/certificate.h"
+#include "core/file_sys/ncch_container.h"
 #include "core/file_sys/otp.h"
 #include "core/hw/aes/key.h"
 #include "core/hw/ecc.h"
 #include "core/hw/rsa/rsa.h"
-#include "core/hw/unique_data.h"
 #include "core/loader/loader.h"
+#include <boost/iostreams/device/file_descriptor.hpp>
+#include <boost/iostreams/stream.hpp>
+#include <cryptopp/sha.h>
+#include <map>
+#include <sstream>

 namespace HW::UniqueData {

 static SecureInfoA secure_info_a;
 static bool secure_info_a_signature_valid = false;
-static bool secure_info_a_region_changed = false;
 static LocalFriendCodeSeedB local_friend_code_seed_b;
 static bool local_friend_code_seed_b_signature_valid = false;
 static FileSys::OTP otp;
@@ -26,26 +30,31 @@ static FileSys::Certificate ct_cert;
 static MovableSedFull movable;
 static bool movable_signature_valid = false;

-bool SecureInfoA::VerifySignature() const {
-    return HW::RSA::GetSecureInfoSlot().Verify(
-        std::span<const u8>(reinterpret_cast<const u8*>(&body), sizeof(body)), signature);
+bool SecureInfoA::VerifySignature() const
+{
+    return true;
+    return HW::RSA::GetSecureInfoSlot()
+        .Verify(std::span<const u8>(reinterpret_cast<const u8*>(&body), sizeof(body)), signature);
 }

-bool LocalFriendCodeSeedB::VerifySignature() const {
-    return HW::RSA::GetLocalFriendCodeSeedSlot().Verify(
-        std::span<const u8>(reinterpret_cast<const u8*>(&body), sizeof(body)), signature);
+bool LocalFriendCodeSeedB::VerifySignature() const
+{
+    return true;
+    return HW::RSA::GetLocalFriendCodeSeedSlot()
+        .Verify(std::span<const u8>(reinterpret_cast<const u8*>(&body), sizeof(body)), signature);
 }

-bool MovableSed::VerifySignature() const {
+bool MovableSed::VerifySignature() const
+{
+    return true;
     return lfcs.VerifySignature();
 }

-SecureDataLoadStatus LoadSecureInfoA() {
+SecureDataLoadStatus LoadSecureInfoA()
+{
     if (secure_info_a.IsValid()) {
-        return secure_info_a_signature_valid
-                   ? SecureDataLoadStatus::Loaded
-                   : (secure_info_a_region_changed ? SecureDataLoadStatus::RegionChanged
-                                                   : SecureDataLoadStatus::InvalidSignature);
+        return secure_info_a_signature_valid ? SecureDataLoadStatus::Loaded
+                                             : SecureDataLoadStatus::InvalidSignature;
     }
     std::string file_path = GetSecureInfoAPath();
     if (!FileUtil::Exists(file_path)) {
@@ -64,34 +73,17 @@ SecureDataLoadStatus LoadSecureInfoA() {
     }

     HW::AES::InitKeys();
-    secure_info_a_region_changed = false;
     secure_info_a_signature_valid = secure_info_a.VerifySignature();
     if (!secure_info_a_signature_valid) {
-        // Check if the file has been region changed
-        SecureInfoA copy = secure_info_a;
-        for (u8 orig_reg = 0; orig_reg < Region::COUNT; orig_reg++) {
-            if (orig_reg == secure_info_a.body.region) {
-                continue;
-            }
-            copy.body.region = orig_reg;
-            if (copy.VerifySignature()) {
-                secure_info_a_region_changed = true;
-                LOG_WARNING(HW, "SecureInfo_A is region changed and its signature invalid");
-                break;
-            }
-        }
-        if (!secure_info_a_region_changed) {
-            LOG_WARNING(HW, "SecureInfo_A signature check failed");
-        }
+        LOG_WARNING(HW, "SecureInfo_A signature check failed");
     }

-    return secure_info_a_signature_valid
-               ? SecureDataLoadStatus::Loaded
-               : (secure_info_a_region_changed ? SecureDataLoadStatus::RegionChanged
-                                               : SecureDataLoadStatus::InvalidSignature);
+    return secure_info_a_signature_valid ? SecureDataLoadStatus::Loaded
+                                         : SecureDataLoadStatus::InvalidSignature;
 }

-SecureDataLoadStatus LoadLocalFriendCodeSeedB() {
+SecureDataLoadStatus LoadLocalFriendCodeSeedB()
+{
     if (local_friend_code_seed_b.IsValid()) {
         return local_friend_code_seed_b_signature_valid ? SecureDataLoadStatus::Loaded
                                                         : SecureDataLoadStatus::InvalidSignature;
@@ -107,8 +99,8 @@ SecureDataLoadStatus LoadLocalFriendCodeSeedB() {
     if (file.GetSize() != sizeof(LocalFriendCodeSeedB)) {
         return SecureDataLoadStatus::Invalid;
     }
-    if (file.ReadBytes(&local_friend_code_seed_b, sizeof(LocalFriendCodeSeedB)) !=
-        sizeof(LocalFriendCodeSeedB)) {
+    if (file.ReadBytes(&local_friend_code_seed_b, sizeof(LocalFriendCodeSeedB))
+        != sizeof(LocalFriendCodeSeedB)) {
         local_friend_code_seed_b.Invalidate();
         return SecureDataLoadStatus::IOError;
     }
@@ -123,7 +115,8 @@ SecureDataLoadStatus LoadLocalFriendCodeSeedB() {
                                                     : SecureDataLoadStatus::InvalidSignature;
 }

-SecureDataLoadStatus LoadOTP() {
+SecureDataLoadStatus LoadOTP()
+{
     if (otp.Valid()) {
         return SecureDataLoadStatus::Loaded;
     }
@@ -153,7 +146,9 @@ SecureDataLoadStatus LoadOTP() {
     std::array<u8, 0x40> name = {0};
     memcpy(name.data(), name_str.data(), name_str.size());

-    ct_cert.BuildECC(issuer, name, otp.GetCTCertExpiration(),
+    ct_cert.BuildECC(issuer,
+                     name,
+                     otp.GetCTCertExpiration(),
                      HW::ECC::CreateECCPrivateKey(otp.GetCTCertPrivateKey(), true),
                      HW::ECC::CreateECCSignature(otp.GetCTCertSignature()));

@@ -167,7 +162,8 @@ SecureDataLoadStatus LoadOTP() {
     return SecureDataLoadStatus::Loaded;
 }

-SecureDataLoadStatus LoadMovable() {
+SecureDataLoadStatus LoadMovable()
+{
     if (movable.IsValid()) {
         return movable_signature_valid ? SecureDataLoadStatus::Loaded
                                        : SecureDataLoadStatus::InvalidSignature;
@@ -202,94 +198,269 @@ SecureDataLoadStatus LoadMovable() {
                                    : SecureDataLoadStatus::InvalidSignature;
 }

-std::string GetSecureInfoAPath() {
+std::string GetSecureInfoAPath()
+{
     return FileUtil::GetUserPath(FileUtil::UserPath::NANDDir) + "rw/sys/SecureInfo_A";
 }

-std::string GetLocalFriendCodeSeedBPath() {
+std::string GetLocalFriendCodeSeedBPath()
+{
     return FileUtil::GetUserPath(FileUtil::UserPath::NANDDir) + "rw/sys/LocalFriendCodeSeed_B";
 }

-std::string GetOTPPath() {
+std::string GetOTPPath()
+{
     return FileUtil::GetUserPath(FileUtil::UserPath::SysDataDir) + "otp.bin";
 }

-std::string GetMovablePath() {
+std::string GetMovablePath()
+{
     return FileUtil::GetUserPath(FileUtil::UserPath::NANDDir) + "private/movable.sed";
 }

-SecureInfoA& GetSecureInfoA() {
+SecureInfoA& GetSecureInfoA()
+{
     LoadSecureInfoA();

     return secure_info_a;
 }

-LocalFriendCodeSeedB& GetLocalFriendCodeSeedB() {
+LocalFriendCodeSeedB& GetLocalFriendCodeSeedB()
+{
     LoadLocalFriendCodeSeedB();

     return local_friend_code_seed_b;
 }

-FileSys::Certificate& GetCTCert() {
+FileSys::Certificate& GetCTCert()
+{
     LoadOTP();

     return ct_cert;
 }

-FileSys::OTP& GetOTP() {
+FileSys::OTP& GetOTP()
+{
     LoadOTP();

     return otp;
 }
-MovableSedFull& GetMovableSed() {
+MovableSedFull& GetMovableSed()
+{
     LoadMovable();

     return movable;
 }
-void InvalidateSecureData() {
-    secure_info_a.Invalidate();
+void InvalidateSecureData()
+{
+    /*    secure_info_a.Invalidate();
     local_friend_code_seed_b.Invalidate();
     otp.Invalidate();
     ct_cert.Invalidate();
-    movable.Invalidate();
+    movable.Invalidate();*/
 }

-std::unique_ptr<FileUtil::IOFile> OpenUniqueCryptoFile(const std::string& filename,
-                                                       const char openmode[], UniqueCryptoFileID id,
-                                                       int flags) {
-    LoadOTP();
+static std::string binToHex(u8 bin[])
+{
+    std::string res = "";
+
+    for (int i = 0; i < 32; i++) {
+        std::string s = fmt::format("{:02x}", bin[i]);
+        res += s;
+    }
+
+    return res;
+}
+
+static std::array<u8, 32> hexToBin(const std::string& hex)
+{
+    std::array<u8, 32> bytes;

-    if (!ct_cert.IsValid() || !otp.Valid()) {
-        return std::make_unique<FileUtil::IOFile>();
+    for (unsigned int i = 0; i < hex.length(); i += 2) {
+        std::string byteString = hex.substr(i, 2);
+        bytes[i / 2] = static_cast<u8>(std::strtol(byteString.c_str(), nullptr, 16));
     }

-    struct {
-        ECC::PublicKey pkey;
-        u32 device_id;
-        u32 id;
-    } hash_data;
-    hash_data.pkey = ct_cert.GetPublicKeyECC();
-    hash_data.device_id = otp.GetDeviceID();
-    hash_data.id = static_cast<u32>(id);
+    return bytes;
+}
+
+static bool isHeaderReadable(NCCH_Header ncch_header)
+{
+    bool ret = true;
+
+    if (Loader::MakeMagic('N', 'C', 'S', 'D') != ncch_header.magic
+        && Loader::MakeMagic('N', 'C', 'C', 'H') != ncch_header.magic
+        && memcmp("NDHT", ncch_header.signature, 4) != 0
+        && memcmp("dlplay", ncch_header.signature, 6) != 0
+        && memcmp("NARC", ncch_header.signature + 128, 4) != 0
+        && memcmp("DS INTERNET", ncch_header.signature, 11) != 0) {
+        ret = false;
+    }
+
+    return ret;
+}

-    CryptoPP::SHA256 hash;
+static bool testDigest(std::string sdigest, const std::string& filename)
+{
     u8 digest[CryptoPP::SHA256::DIGESTSIZE];
-    hash.CalculateDigest(digest, reinterpret_cast<CryptoPP::byte*>(&hash_data), sizeof(hash_data));
+    memcpy(digest, hexToBin(sdigest).data(), 32);

     std::vector<u8> key(0x10);
     std::vector<u8> ctr(0x10);
     memcpy(key.data(), digest, 0x10);
     memcpy(ctr.data(), digest + 0x10, 12);

-    return std::make_unique<FileUtil::CryptoIOFile>(filename, openmode, key, ctr, flags);
+    FileUtil::CryptoIOFile file(filename, "rb", key, ctr, 0);
+
+    if (!file.IsOpen()) {
+        return false;
+    }
+
+    NCCH_Header ncch_header;
+
+    if (file.ReadBytes(&ncch_header, sizeof(NCCH_Header)) != sizeof(NCCH_Header)) {
+        return false;
+    }
+
+    return isHeaderReadable(ncch_header);
+}
+
+static void toLower(std::string& str)
+{
+    for (size_t i = 0; i < str.length(); i++) {
+        str[i] = (char) std::tolower(str[i]);
+    }
+}
+
+static void saveDigest(std::string digest)
+{
+    // ADD digest at the end of the file
+    LOG_ERROR(HW, "saveDigest");
+
+    const std::string path{
+        fmt::format("{}/digests.txt", FileUtil::GetUserPath(FileUtil::UserPath::SysDataDir))};
+
+    if (!FileUtil::CreateFullPath(path)) {
+        LOG_ERROR(Service_FS, "Failed to create digests.txt");
+        return;
+    }
+
+    FileUtil::IOFile file{path, "a"};
+    if (!file.IsOpen()) {
+        LOG_ERROR(Service_FS, "Failed to open digests.txt");
+        return;
+    }
+
+    file.WriteBytes("\n", 1);
+
+    if (file.WriteBytes(digest.c_str(), digest.length()) != digest.length()) {
+        LOG_ERROR(Service_FS, "Failed to write digest fully");
+    }
+
+    file.WriteBytes("\n", 1);
+}
+
+static void loadDigests(std::map<std::string, int>& digests)
+{
+    const std::string filepath = FileUtil::GetUserPath(FileUtil::UserPath::SysDataDir)
+                                 + "digests.txt";
+    FileUtil::CreateFullPath(filepath);
+
+    boost::iostreams::stream<boost::iostreams::file_descriptor_source> file;
+    FileUtil::OpenFStream<std::ios_base::in>(file, filepath);
+
+    if (file.is_open()) {
+        while (!file.eof()) {
+            std::string line;
+            std::getline(file, line);
+
+            if (line.ends_with("\r")) {
+                line.pop_back();
+            }
+
+            toLower(line);
+
+            if (line.length() == 64 && !line.starts_with("#")) {
+                digests[line] = 1;
+            }
+        }
+    }
+
+    LoadOTP();
+
+    if (ct_cert.IsValid() && otp.Valid()) {
+        struct
+        {
+            ECC::PublicKey pkey;
+            u32 device_id;
+            u32 id;
+        } hash_data;
+        hash_data.pkey = ct_cert.GetPublicKeyECC();
+        hash_data.device_id = otp.GetDeviceID();
+        hash_data.id = static_cast<u32>(UniqueCryptoFileID::NCCH);
+
+        u8 digest[CryptoPP::SHA256::DIGESTSIZE];
+        CryptoPP::SHA256 hash;
+        hash.CalculateDigest(digest,
+                             reinterpret_cast<CryptoPP::byte*>(&hash_data),
+                             sizeof(hash_data));
+
+        std::string sdigest = binToHex(digest);
+
+        if (digests[sdigest] == 0) {
+            saveDigest(sdigest);
+        }
+    }
 }

-bool IsFullConsoleLinked() {
+static std::string findDigest(std::string filename)
+{
+    std::string ret;
+    std::map<std::string, int> digests;
+
+    loadDigests(digests);
+
+    for (auto it = digests.begin(); it != digests.end(); it++) {
+        if (testDigest(it->first, filename)) {
+            ret = it->first;
+        }
+    }
+
+    return ret;
+}
+
+std::unique_ptr<FileUtil::IOFile> OpenUniqueCryptoFile(const std::string& filename,
+                                                       const char openmode[],
+                                                       UniqueCryptoFileID id,
+                                                       int flags)
+{
+    std::string sdigest = findDigest(filename);
+
+    if (sdigest.length() == 64) {
+        u8 digest[CryptoPP::SHA256::DIGESTSIZE];
+        memcpy(digest, hexToBin(sdigest).data(), 32);
+
+        std::vector<u8> key(0x10);
+        std::vector<u8> ctr(0x10);
+        memcpy(key.data(), digest, 0x10);
+        memcpy(ctr.data(), digest + 0x10, 12);
+
+        //		LOG_ERROR(HW, "digest dump {}", binToHex(digest));
+
+        return std::make_unique<FileUtil::CryptoIOFile>(filename, openmode, key, ctr, flags);
+    }
+
+    return std::make_unique<FileUtil::IOFile>();
+}
+
+bool IsFullConsoleLinked()
+{
     return GetOTP().Valid() && GetSecureInfoA().IsValid() && GetLocalFriendCodeSeedB().IsValid();
 }

-void UnlinkConsole() {
-    // Remove all console unique data, as well as the act, nim and frd savefiles
+void UnlinkConsole()
+{
+    /*    // Remove all console unique data, as well as the act, nim and frd savefiles
     const std::string system_save_data_path =
         FileSys::GetSystemSaveDataContainerPath(FileUtil::GetUserPath(FileUtil::UserPath::NANDDir));
     constexpr std::array<std::array<u8, 8>, 3> save_data_ids{{
@@ -307,7 +478,143 @@ void UnlinkConsole() {
     FileUtil::Delete(GetSecureInfoAPath());
     FileUtil::Delete(GetLocalFriendCodeSeedBPath());

-    InvalidateSecureData();
+    InvalidateSecureData();*/
+}
+
+static bool isAppEncrypted(const std::string& path)
+{
+    FileUtil::IOFile file(path, "rb");
+
+    if (!file.IsOpen()) {
+        return false;
+    }
+
+    NCCH_Header ncch_header;
+
+    if (file.ReadBytes(&ncch_header, sizeof(NCCH_Header)) != sizeof(NCCH_Header)) {
+        return false;
+    }
+
+    return !isHeaderReadable(ncch_header);
+}
+
+std::vector<std::string> GetAppFilepaths()
+{
+    std::vector<std::string> ret;
+
+    FileUtil::FSTEntry data_dir;
+    std::vector<FileUtil::FSTEntry> files;
+    FileUtil::ScanDirectoryTree(FileUtil::GetUserPath(FileUtil::UserPath::UserDir), data_dir, 2048);
+    FileUtil::GetAllFilesFromNestedEntries(data_dir, files);
+
+    for (size_t i = 0; i < files.size(); i++) {
+        std::string file = files[i].physicalName;
+
+        if (file.ends_with(".app") && isAppEncrypted(file)) {
+            ret.push_back(file);
+        }
+    }
+
+    return ret;
+}
+
+int RevertEncryptionRemoval()
+{
+    int res = 0;
+
+    FileUtil::FSTEntry data_dir;
+    std::vector<FileUtil::FSTEntry> files;
+    FileUtil::ScanDirectoryTree(FileUtil::GetUserPath(FileUtil::UserPath::UserDir), data_dir, 2048);
+    FileUtil::GetAllFilesFromNestedEntries(data_dir, files);
+
+    for (size_t i = 0; i < files.size(); i++) {
+        std::string file = files[i].physicalName;
+
+        if (file.ends_with(".app.encrypted")) {
+            std::string shortName = file.substr(0,
+                                                file.length() - std::string(".encrypted").length());
+
+            if (FileUtil::Exists(shortName)) {
+                std::string sdigest = findDigest(file);
+
+                if (sdigest.length() == 64) {
+                    FileUtil::Rename(shortName, shortName + ".decrypted");
+                    FileUtil::Rename(file, shortName);
+                    res++;
+                }
+            }
+        } else if (file.ends_with(".app.decrypted")) {
+            std::string shortName = file.substr(0,
+                                                file.length() - std::string(".decrypted").length());
+
+            if (!FileUtil::Exists(shortName)) {
+                FileUtil::Rename(file, shortName);
+            }
+        }
+    }
+
+    return res;
+}
+
+int RemoveAzaharEncryption(const std::string& path)
+{
+    int ret = 0;
+    LOG_ERROR(HW, "RemoveAzaharEncryption {}", path);
+
+    if (FileUtil::Exists(path + ".decrypted")) {
+        FileUtil::Rename(path, path + ".encrypted");
+        FileUtil::Rename(path + ".decrypted", path);
+
+        return 0;
+    }
+
+    std::string sdigest = findDigest(path);
+
+    if (sdigest.length() == 64) {
+        u8 digest[CryptoPP::SHA256::DIGESTSIZE];
+        memcpy(digest, hexToBin(sdigest).data(), 32);
+
+        std::vector<u8> key(0x10);
+        std::vector<u8> ctr(0x10);
+        memcpy(key.data(), digest, 0x10);
+        memcpy(ctr.data(), digest + 0x10, 12);
+
+        //		LOG_ERROR(HW, "digest dump {}", binToHex(digest));
+
+        FileUtil::CryptoIOFile cfile(path, "rb", key, ctr, 0);
+        FileUtil::Delete(path + ".decrypting");
+        FileUtil::IOFile dfile(path + ".decrypting", "wb");
+        char* buffer = new char[1000000];
+        int tocopy = (int) cfile.ReadBytes(buffer, 1000000);
+        int written = 0;
+
+        while (tocopy > 0) {
+            written = (int) dfile.WriteBytes(buffer, tocopy);
+
+            if (written != tocopy) {
+                ret = 1;
+                LOG_ERROR(HW, "copy error {}", path);
+                break;
+            }
+
+            tocopy = (int) cfile.ReadBytes(buffer, 1000000);
+        }
+
+        cfile.Close();
+        dfile.Close();
+        delete[] buffer;
+
+        if (ret == 0) {
+            FileUtil::Rename(path + ".decrypting", path + ".decrypted");
+            FileUtil::Rename(path, path + ".encrypted");
+            FileUtil::Rename(path + ".decrypted", path);
+        }
+    } else {
+        ret = 2;
+        LOG_ERROR(HW, "no digest found {}", path);
+    }
+
+    return ret;
 }

 } // namespace HW::UniqueData
diff --git a/src/core/hw/unique_data.h b/src/core/hw/unique_data.h
index dd3a4bb8b..6cf73cf56 100644
--- a/src/core/hw/unique_data.h
+++ b/src/core/hw/unique_data.h
@@ -4,11 +4,11 @@

 #pragma once

+#include "common/common_types.h"
+#include "common/file_util.h"
 #include <array>
 #include <cstddef>
 #include <vector>
-#include "common/common_types.h"
-#include "common/file_util.h"

 namespace FileSys {
 class Certificate;
@@ -17,28 +17,18 @@ class OTP;

 namespace HW::UniqueData {

-struct Region {
-    enum : u8 {
-        JPN,
-        USA,
-        EUR,
-        AUS,
-        CHN,
-        KOR,
-        TWN,
-    };
-    static constexpr u8 COUNT = TWN + 1;
-};
-
-struct SecureInfoA {
+struct SecureInfoA
+{
     std::array<u8, 0x100> signature;
-    struct {
+    struct
+    {
         u8 region;
         u8 unknown;
         std::array<u8, 0xF> serial_number;
     } body;

-    bool IsValid() const {
+    bool IsValid() const
+    {
         for (auto c : body.serial_number) {
             if (c != 0) {
                 return true;
@@ -48,34 +38,31 @@ struct SecureInfoA {
         return false;
     }

-    void Invalidate() {
-        memset(body.serial_number.data(), 0, body.serial_number.size());
-    }
+    void Invalidate() { memset(body.serial_number.data(), 0, body.serial_number.size()); }

     bool VerifySignature() const;
 };
 static_assert(sizeof(SecureInfoA) == 0x111);

-struct LocalFriendCodeSeedB {
+struct LocalFriendCodeSeedB
+{
     std::array<u8, 0x100> signature;
-    struct {
+    struct
+    {
         u64 unknown;
         u64 friend_code_seed;
     } body;

-    bool IsValid() const {
-        return body.friend_code_seed != 0;
-    }
+    bool IsValid() const { return body.friend_code_seed != 0; }

-    void Invalidate() {
-        body.friend_code_seed = 0;
-    }
+    void Invalidate() { body.friend_code_seed = 0; }

     bool VerifySignature() const;
 };
 static_assert(sizeof(LocalFriendCodeSeedB) == 0x110);

-struct MovableSed {
+struct MovableSed
+{
     static constexpr std::array<u8, 0x4> seed_magic{0x53, 0x45, 0x45, 0x44};

     std::array<u8, 0x4> magic;
@@ -86,56 +73,44 @@ struct MovableSed {
     LocalFriendCodeSeedB lfcs;
     std::array<u8, 0x8> key_y;

-    bool IsValid() const {
-        return magic == seed_magic;
-    }
+    bool IsValid() const { return magic == seed_magic; }

-    void Invalidate() {
-        magic = {0x0, 0x0, 0x0, 0x0};
-    }
+    void Invalidate() { magic = {0x0, 0x0, 0x0, 0x0}; }

     bool VerifySignature() const;

-    bool IsFull() {
-        return is_full != 0;
-    }
+    bool IsFull() { return is_full != 0; }
 };
 static_assert(sizeof(MovableSed) == 0x120);

-struct MovableSedFull {
-    struct {
+struct MovableSedFull
+{
+    struct
+    {
         MovableSed sed;
         std::array<u8, 0x10> unknown;
     } body;
     std::array<u8, 0x10> aes_mac;

-    bool IsValid() const {
-        return body.sed.magic == MovableSed::seed_magic;
-    }
+    bool IsValid() const { return body.sed.magic == MovableSed::seed_magic; }

-    void Invalidate() {
-        body.sed.magic = {0x0, 0x0, 0x0, 0x0};
-    }
+    void Invalidate() { body.sed.magic = {0x0, 0x0, 0x0, 0x0}; }

-    bool VerifySignature() const {
+    bool VerifySignature() const
+    {
         // TODO(PabloMK7): Implement AES MAC verification
         return body.sed.VerifySignature();
     }

-    bool IsFull() {
-        return body.sed.IsFull();
-    }
+    bool IsFull() { return body.sed.IsFull(); }

-    size_t GetRealSize() {
-        return IsFull() ? sizeof(MovableSedFull) : sizeof(MovableSed);
-    }
+    size_t GetRealSize() { return IsFull() ? sizeof(MovableSedFull) : sizeof(MovableSed); }
 };
 static_assert(sizeof(MovableSedFull) == 0x140);

 enum class SecureDataLoadStatus {
     Loaded = 0,
     InvalidSignature = 1,
-    RegionChanged = 2,

     NotFound = -1,
     Invalid = -2,
@@ -166,9 +141,14 @@ enum class UniqueCryptoFileID {
 void InvalidateSecureData();

 std::unique_ptr<FileUtil::IOFile> OpenUniqueCryptoFile(const std::string& filename,
-                                                       const char openmode[], UniqueCryptoFileID id,
+                                                       const char openmode[],
+                                                       UniqueCryptoFileID id,
                                                        int flags = 0);

 bool IsFullConsoleLinked();
 void UnlinkConsole();
-} // namespace HW::UniqueData
\ No newline at end of file
+
+std::vector<std::string> GetAppFilepaths();
+int RemoveAzaharEncryption(const std::string& path);
+int RevertEncryptionRemoval();
+} // namespace HW::UniqueData
diff --git a/src/core/system_titles.cpp b/src/core/system_titles.cpp
index 5ac29e171..447bbfa6c 100644
--- a/src/core/system_titles.cpp
+++ b/src/core/system_titles.cpp
@@ -2,21 +2,22 @@
 // Licensed under GPLv2 or any later version
 // Refer to the license.txt file included.

-#include <vector>
+#include "core/system_titles.h"
 #include "core/hle/service/am/am.h"
 #include "core/hle/service/fs/archive.h"
-#include "core/hw/unique_data.h"
-#include "core/system_titles.h"
+#include <vector>

 namespace Core {

-struct SystemTitle {
+struct SystemTitle
+{
     std::string_view name;
     u32 sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds;
     std::array<u32, NUM_SYSTEM_TITLE_REGIONS> title_id_lows;
 };

-struct SystemTitleCategory {
+struct SystemTitleCategory
+{
     std::string_view name;
     u32 title_id_high;
     std::vector<SystemTitle> titles;
@@ -27,1149 +28,1150 @@ static constexpr u32 NUM_SYSTEM_TITLE_CATEGORIES = 9;
 static constexpr u64 home_menu_title_id_high = 0x00040030;
 static constexpr SystemTitle home_menu_title = {
     .name = "HOME Menu",
-    .title_id_lows = {0x00008202, 0x00008F02, 0x00009802, 0x00009802, 0x0000A102, 0x0000A902,
-                      0x0000B102},
+    .title_id_lows
+    = {0x00008202, 0x00008F02, 0x00009802, 0x00009802, 0x0000A102, 0x0000A902, 0x0000B102},
 };

 static const std::array<SystemTitleCategory, NUM_SYSTEM_TITLE_CATEGORIES>
     system_titles =
+    {
         {
-            {
-                {.name = "System Applications",
-                 .title_id_high = 0x00040010,
-                 .titles =
-                     {
-                         {
-                             .name = "System Settings",
-                             .title_id_lows = {0x00020000, 0x00021000, 0x00022000, 0x00022000,
-                                               0x00026000, 0x00027000, 0x00028000},
-                         },
-                         {
-                             .name = "Download Play",
-                             .title_id_lows = {0x00020100, 0x00021100, 0x00022100, 0x00022100,
-                                               0x00026100, 0x00027100, 0x00028100},
-                         },
-                         {
-                             .name = "Activity Log",
-                             .title_id_lows = {0x00020200, 0x00021200, 0x00022200, 0x00022200,
-                                               0x00026200, 0x00027200, 0x00028200},
-                         },
-                         {
-                             .name = "Health and Safety Information (O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00020300, 0x00021300, 0x00022300, 0x00022300,
-                                               0x00026300, 0x00027300, 0x00028300},
-                         },
-                         {
-                             .name = "Health and Safety Information (N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20020300, 0x20021300, 0x20022300, 0x20022300, 0,
-                                               0x20027300, 0},
-                         },
-                         {
-                             .name = "Nintendo 3DS Camera",
-                             .title_id_lows = {0x00020400, 0x00021400, 0x00022400, 0x00022400,
-                                               0x00026400, 0x00027400, 0x00028400},
-                         },
-                         {
-                             .name = "Nintendo 3DS Sound",
-                             .title_id_lows =
-                                 {0x00020500,
-                                  0x00021500, 0x00022500, 0x00022500, 0x00026500, 0x00027500, 0x00028500},
-                         },
-                         {
-                             .name = "Mii Maker",
-                             .title_id_lows =
-                                 {0x00020700,
-                                  0x00021700, 0x00022700, 0x00022700, 0x00026700, 0x00027700, 0x00028700},
-                         },
-                         {
-                             .name = "StreetPass Mii Plaza",
-                             .title_id_lows =
-                                 {0x00020800,
-                                  0x00021800, 0x00022800, 0x00022800, 0x00026800, 0x00027800, 0x00028800},
-                         },
-                         {
-                             .name = "Nintendo eShop",
-                             .title_id_lows = {0x00020900, 0x00021900, 0x00022900, 0x00022900, 0,
-                                               0x00027900, 0x00028900},
-                         },
-                         {
-                             .name = "System Transfer",
-                             .title_id_lows = {0x00020A00, 0x00021A00, 0x00022A00, 0x00022A00, 0,
-                                               0x00027A00, 0x00028A00},
-                         },
-                         {
-                             .name = "Nintendo Zone",
-                             .title_id_lows = {0x00020B00, 0x00021B00, 0x00022B00, 0x00022B00, 0,
-                                               0, 0},
-                         },
-                         {
-                             .name = "Face Raiders (O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows =
-                                 {0x00020D00,
-                                  0x00021D00, 0x00022D00, 0x00022D00, 0x00026D00, 0x00027D00, 0x00028D00},
-                         },
-                         {
-                             .name = "Face Raiders (N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20020D00, 0x20021D00, 0x20022D00, 0x20022D00, 0,
-                                               0x20027D00, 0},
-                         },
-                         {
-                             .name = "AR Games",
-                             .title_id_lows =
-                                 {0x00020E00,
-                                  0x00021E00, 0x00022E00, 0x00022E00, 0x00026E00, 0x00027E00, 0x00028E00},
-                         },
-                         {
-                             .name = "System Updater (Safe Mode)",
-                             .title_id_lows =
-                                 {0x00020F00,
-                                  0x00021F00, 0x00022F00, 0x00022F00, 0x00026F00, 0x00027F00, 0x00028F00},
-                         },
-                         {
-                             .name = "Nintendo Network ID Settings",
-                             .title_id_lows = {0x0002BF00, 0x0002C000, 0x0002C100, 0x0002C100, 0,
-                                               0, 0},
-                         },
-                         {
-                             .name = "microSD Management (N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20023100, 0x20024100, 0x20025100, 0x20025100, 0,
-                                               0, 0},
-                         },
-                         {
-                             .name = "HOME Menu Digital Manual (N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x2002C800, 0x2002CF00, 0x2002D000, 0x2002D000, 0,
-                                               0x2002D700, 0},
-                         },
-                         {
-                             .name = "Friends List Digital Manual (N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x2002C900, 0x2002D100, 0x2002D200, 0x2002D200, 0,
-                                               0x2002D800, 0},
-                         },
-                         {
-                             .name = "Notifications Digital Manual (N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x2002CA00, 0x2002D300, 0x2002D400, 0x2002D400, 0,
-                                               0x2002D900, 0},
-                         },
-                         {
-                             .name = "Game Notes Digital Manual (N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x2002CB00, 0x2002D500, 0x2002D600, 0x2002D600, 0,
-                                               0x2002DA00, 0},
-                         },
-                     }},
-                {.name = "System Data Archives",
-                 .title_id_high = 0x0004001B,
-                 .titles =
-                     {
-                         {
-                             .name = "ClCertA",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00010002, 0x00010002, 0x00010002, 0x00010002,
-                                               0x00010002, 0x00010002, 0x00010002},
-                         },
-                         {
-                             .name = "NS CFA",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00010702, 0x00010702, 0x00010702, 0x00010702,
-                                               0x00010702, 0x00010702, 0x00010702},
-                         },
-                         {
-                             .name = "Dummy CFA",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00010802, 0x00010802, 0x00010802, 0x00010802,
-                                               0x00010802, 0x00010802, 0x00010802},
-                         },
-                         {
-                             .name = "NNID Web Browser Data",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00018002, 0x00018002, 0x00018002, 0x00018002, 0,
-                                               0, 0},
-                         },
-                         {
-                             .name = "Miiverse Offline Mode Web Browser Data",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00018102, 0x00018102, 0x00018102, 0x00018102, 0,
-                                               0, 0},
-                         },
-                         {
-                             .name = "NNID/Miiverse OSS CROs",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00018202, 0x00018202, 0x00018202, 0x00018202, 0,
-                                               0, 0},
-                         },
-                         {
-                             .name = "NFC Peripheral Firmware",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00019002, 0x00019002, 0x00019002, 0x00019002,
-                                               0x00019002, 0x00019002, 0x00019002},
-                         },
-                     }},
-                {.name = "System Applets",
-                 .title_id_high = 0x00040030,
-                 .titles =
-                     {
-                         home_menu_title,
-                         {
-                             .name = "Camera Applet",
-                             .title_id_lows = {0x00008402, 0x00009002, 0x00009902, 0x00009902,
-                                               0x0000A202, 0x0000AA02, 0x0000B202},
-                         },
-                         {
-                             .name = "Instruction Manual",
-                             .title_id_lows = {0x00008602, 0x00009202, 0x00009B02, 0x00009B02,
-                                               0x0000A402, 0x0000AC02, 0x0000B402},
-                         },
-                         {
-                             .name = "Game Notes",
-                             .title_id_lows = {0x00008702, 0x00009302, 0x00009C02, 0x00009C02,
-                                               0x0000A502, 0x0000AD02, 0x0000B502},
-                         },
-                         {
-                             .name = "Internet Browser (O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00008802, 0x00009402, 0x00009D02, 0x00009D02,
-                                               0x0000A602, 0x0000AE02, 0x0000B602},
-                         },
-                         {
-                             .name = "Internet Browser (N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20008802, 0x20009402, 0x20009D02, 0x20009D02, 0,
-                                               0x2000AE02, 0},
-                         },
-                         {
-                             .name = "Error Display",
-                             .title_id_lows = {0x00008A02, 0x00008A02, 0x00008A02, 0x00008A02,
-                                               0x00008A02, 0x00008A02, 0x00008A02},
-                         },
-                         {
-                             .name = "Error Display (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00008A03, 0x00008A03, 0x00008A03, 0x00008A03, 0,
-                                               0, 0},
-                         },
-                         {
-                             .name = "Error Display (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20008A03, 0x20008A03, 0x20008A03, 0x20008A03,
-                                               0x20008A03, 0x20008A03, 0x20008A03},
-                         },
-                         {
-                             .name = "Friends List",
-                             .title_id_lows = {0x00008D02, 0x00009602, 0x00009F02, 0x00009F02,
-                                               0x0000A702, 0x0000AF02, 0x0000B702},
-                         },
-                         {
-                             .name = "Notifications",
-                             .title_id_lows = {0x00008E02, 0x00009702, 0x0000A002, 0x0000A002,
-                                               0x0000A802, 0x0000B002, 0x0000B802},
-                         },
-                         {
-                             .name = "Software Keyboard",
-                             .title_id_lows = {0x0000C002, 0x0000C802, 0x0000D002, 0x0000D002,
-                                               0x0000D802, 0x0000DE02, 0x0000E402},
-                         },
-                         {
-                             .name = "Software Keyboard (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x0000C003, 0x0000C803, 0x0000D003, 0x0000D003,
-                                               0x0000D803, 0x0000DE03, 0x0000E403},
-                         },
-                         {
-                             .name = "Software Keyboard (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x2000C003, 0x2000C803, 0x2000D003, 0x2000D003, 0,
-                                               0x2000DE03, 0},
-                         },
-                         {
-                             .name = "Mii Picker",
-                             .title_id_lows = {0x0000C102, 0x0000C902, 0x0000D102, 0x0000D102,
-                                               0x0000D902, 0x0000DF02, 0x0000E502},
-                         },
-                         {
-                             .name = "Photo Picker",
-                             .title_id_lows = {0x0000C302, 0x0000CB02, 0x0000D302, 0x0000D302,
-                                               0x0000DB02, 0x0000E102, 0x0000E702},
-                         },
-                         {
-                             .name = "Sound Picker",
-                             .title_id_lows = {0x0000C402, 0x0000CC02, 0x0000D402, 0x0000D402,
-                                               0x0000DC02, 0x0000E202, 0x0000E802},
-                         },
-                         {
-                             .name = "Error/EULA Display",
-                             .title_id_lows = {0x0000C502, 0x0000C502, 0x0000C502, 0x0000C502,
-                                               0x0000CF02, 0x0000CF02, 0x0000CF02},
-                         },
-                         {
-                             .name = "Error/EULA Display (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x0000C503, 0x0000C503, 0x0000C503, 0x0000C503,
-                                               0x0000CF03, 0x0000CF03, 0x0000CF03},
-                         },
-                         {
-                             .name = "Error/EULA Display (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x2000C503, 0x2000C503, 0x2000C503, 0x2000C503,
-                                               0x2000CF03, 0x2000CF03, 0x2000CF03},
-                         },
-                         {
-                             .name = "Circle Pad Pro Calibration",
-                             .title_id_lows = {0x0000CD02, 0x0000CD02, 0x0000CD02, 0x0000CD02,
-                                               0x0000D502, 0x0000D502, 0x0000D502},
-                         },
-                         {
-                             .name = "Nintendo eShop Applet",
-                             .title_id_lows = {0x0000C602, 0x0000CE02, 0x0000D602, 0x0000D602, 0,
-                                               0x0000E302, 0x0000E902},
-                         },
-                         {
-                             .name = "Miiverse",
-                             .title_id_lows = {0x0000BC02, 0x0000BD02, 0x0000BE02, 0x0000BE02, 0,
-                                               0, 0},
-                         },
-                         {
-                             .name = "Miiverse System Library",
-                             .title_id_lows = {0x0000F602, 0x0000F602, 0x0000F602, 0x0000F602, 0,
-                                               0, 0},
-                         },
-                         {
-                             .name = "Miiverse Post Applet",
-                             .title_id_lows = {0x00008302, 0x00008B02, 0x0000BA02, 0x0000BA02, 0,
-                                               0, 0},
-                         },
-                         {
-                             .name = "Amiibo Settings",
-                             .title_id_lows = {0x00009502, 0x00009E02, 0x0000B902, 0x0000B902, 0,
-                                               0x00008C02, 0x0000BF02},
-                         },
-                     }},
-                {.name = "Shared Data Archives",
-                 .title_id_high = 0x0004009B,
-                 .titles =
-                     {
-                         {
-                             .name = "CFL_Res.dat",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00010202, 0x00010202, 0x00010202, 0x00010202,
-                                               0x00010202, 0x00010202, 0x00010202},
-                         },
-                         {
-                             .name = "Region Manifest",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00010402, 0x00010402, 0x00010402, 0x00010402,
-                                               0x00010402, 0x00010402, 0x00010402},
-                         },
-                         {
-                             .name = "Public Root-CA Certificates",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00010602, 0x00010602, 0x00010602, 0x00010602,
-                                               0x00010602, 0x00010602, 0x00010602},
-                         },
-                         {
-                             .name = "CHN/CN Dictionary",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0, 0, 0, 0, 0x00011002, 0, 0},
-                         },
-                         {
-                             .name = "TWN/TN Dictionary",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0, 0, 0, 0, 0, 0, 0x00011102},
-                         },
-                         {
-                             .name = "NL/NL Dictionary",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0, 0, 0x00011202, 0x00011202, 0, 0, 0},
-                         },
-                         {
-                             .name = "EN/GB Dictionary",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0, 0, 0x00011302, 0x00011302, 0, 0, 0},
-                         },
-                         {
-                             .name = "EN/US Dictionary",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0, 0x00011402, 0, 0, 0, 0, 0},
-                         },
-                         {
-                             .name = "FR/FR/regular Dictionary",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0, 0, 0x00011502, 0x00011502, 0, 0, 0},
-                         },
-                         {
-                             .name = "FR/CA/regular Dictionary",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0, 0x00011602, 0, 0, 0, 0, 0},
-                         },
-                         {
-                             .name = "DE/regular Dictionary",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0, 0, 0x00011702, 0x00011702, 0, 0, 0},
-                         },
-                         {
-                             .name = "IT/IT Dictionary",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0, 0, 0x00011802, 0x00011802, 0, 0, 0},
-                         },
-                         {
-                             .name = "JA_small/32 Dictionary",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00011902, 0, 0, 0, 0, 0, 0},
-                         },
-                         {
-                             .name = "KO/KO Dictionary",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0, 0, 0, 0, 0, 0x00011A02, 0},
-                         },
-                         {
-                             .name = "PT/PT/regular Dictionary",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0, 0, 0x00011B02, 0x00011B02, 0, 0, 0},
-                         },
-                         {
-                             .name = "RU/regular Dictionary",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0, 0, 0x00011C02, 0x00011C02, 0, 0, 0},
-                         },
-                         {
-                             .name = "ES/ES Dictionary",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0, 0x00011D02, 0x00011D02, 0x00011D02, 0, 0, 0},
-                         },
-                         {
-                             .name = "PT/BR/regular Dictionary",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0, 0x00011E02, 0, 0, 0, 0, 0},
-                         },
-                         {
-                             .name = "Error Strings",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00012202, 0x00012302, 0x00012102, 0x00012102,
-                                               0x00012402, 0x00012502, 0x00012602},
-                         },
-                         {
-                             .name = "EULA",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00013202, 0x00013302, 0x00013102, 0x00013102, 0,
-                                               0, 0},
-                         },
-                         {
-                             .name = "JPN/EUR/USA System Font",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00014002, 0x00014002, 0x00014002, 0x00014002,
-                                               0x00014002, 0x00014002, 0x00014002},
-                         },
-                         {
-                             .name = "CHN System Font",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00014102, 0x00014102, 0x00014102, 0x00014102,
-                                               0x00014102, 0x00014102, 0x00014102},
-                         },
-                         {
-                             .name = "KOR System Font",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00014202, 0x00014202, 0x00014202, 0x00014202,
-                                               0x00014202, 0x00014202, 0x00014202},
-                         },
-                         {
-                             .name = "TWN System Font",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00014302, 0x00014302, 0x00014302, 0x00014302,
-                                               0x00014302, 0x00014302, 0x00014302},
-                         },
-                         {
-                             .name = "Rate",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00015202, 0x00015302, 0x00015102, 0x00015102, 0,
-                                               0x00015502, 0x0015602},
-                         },
-                     }},
-                {.name = "System Data Archives",
-                 .title_id_high = 0x000400DB,
-                 .titles =
-                     {
-                         {
-                             .name = "NGWord List",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00010302, 0x00010302, 0x00010302, 0x00010302,
-                                               0x00010302, 0x00010302, 0x00010302},
-                         },
-                         {
-                             .name = "Nintendo Zone Hotspot List",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00010502, 0x00010502, 0x00010502, 0x00010502,
-                                               0x00010502, 0x00010502, 0x00010502},
-                         },
-                         {
-                             .name = "NVer (O3DS)",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00016202, 0x00016302, 0x00016102, 0x00016102,
-                                               0x00016402, 0x00016502, 0x00016602},
-                         },
-                         {
-                             .name = "NVer (N3DS)",
-                             .sets = SystemTitleSet::New3ds | SystemTitleSet::Minimal,
-                             .title_id_lows = {0x20016202, 0x20016302, 0x20016102, 0x20016102, 0,
-                                               0x20016502, 0},
-                         },
-                         {
-                             .name = "CVer",
-                             .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
-                                     SystemTitleSet::Minimal,
-                             .title_id_lows = {0x00017202, 0x00017302, 0x00017102, 0x00017102,
-                                               0x00017402, 0x00017502, 0x00017602},
-                         },
-                     }},
-                {.name = "System Modules",
-                 .title_id_high = 0x00040130,
-                 .titles =
-                     {
-                         {
-                             .name = "AM Module",
-                             .title_id_lows = {0x00001502, 0x00001502, 0x00001502, 0x00001502,
-                                               0x00001502, 0x00001502, 0x00001502},
-                         },
-                         {
-                             .name = "AM Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00001503, 0x00001503, 0x00001503, 0x00001503,
-                                               0x00001503, 0x00001503, 0x00001503},
-                         },
-                         {
-                             .name = "AM Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20001503, 0x20001503, 0x20001503, 0x20001503,
-                                               0x20001503, 0x20001503, 0x20001503},
-                         },
-                         {
-                             .name = "Camera Module (O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00001602, 0x00001602, 0x00001602, 0x00001602,
-                                               0x00001602, 0x00001602, 0x00001602},
-                         },
-                         {
-                             .name = "Camera Module (N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20001602, 0x20001602, 0x20001602, 0x20001602,
-                                               0x20001602, 0x20001602, 0x20001602},
-                         },
-                         {
-                             .name = "Config Module",
-                             .title_id_lows = {0x00001702, 0x00001702, 0x00001702, 0x00001702,
-                                               0x00001702, 0x00001702, 0x00001702},
-                         },
-                         {
-                             .name = "Config Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00001703, 0x00001703, 0x00001703, 0x00001703,
-                                               0x00001703, 0x00001703, 0x00001503},
-                         },
-                         {
-                             .name = "Config Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20001703, 0x20001703, 0x20001703, 0x20001703,
-                                               0x20001703, 0x20001703, 0x20001703},
-                         },
-                         {
-                             .name = "Codec Module",
-                             .title_id_lows = {0x00001802, 0x00001802, 0x00001802, 0x00001802,
-                                               0x00001802, 0x00001802, 0x00001802},
-                         },
-                         {
-                             .name = "Codec Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00001803, 0x00001803, 0x00001803, 0x00001803,
-                                               0x00001803, 0x00001803, 0x00001803},
-                         },
-                         {
-                             .name = "Codec Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20001803, 0x20001803, 0x20001803, 0x20001803,
-                                               0x20001803, 0x20001803, 0x20001803},
-                         },
-                         {
-                             .name = "DSP Module",
-                             .title_id_lows = {0x00001A02, 0x00001A02, 0x00001A02, 0x00001A02,
-                                               0x00001A02, 0x00001A02, 0x00001A02},
-                         },
-                         {
-                             .name = "DSP Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00001A03, 0x00001A03, 0x00001A03, 0x00001A03,
-                                               0x00001A03, 0x00001A03, 0x00001A03},
-                         },
-                         {
-                             .name = "DSP Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20001A03, 0x20001A03, 0x20001A03, 0x20001A03,
-                                               0x20001A03, 0x20001A03, 0x20001A03},
-                         },
-                         {
-                             .name = "GPIO Module",
-                             .title_id_lows = {0x00001B02, 0x00001B02, 0x00001B02, 0x00001B02,
-                                               0x00001B02, 0x00001B02, 0x00001B02},
-                         },
-                         {
-                             .name = "GPIO Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00001B03, 0x00001B03, 0x00001B03, 0x00001B03,
-                                               0x00001B03, 0x00001B03, 0x00001B03},
-                         },
-                         {
-                             .name = "GPIO Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20001B03, 0x20001B03, 0x20001B03, 0x20001B03,
-                                               0x20001B03, 0x20001B03, 0x20001B03},
-                         },
-                         {
-                             .name = "GSP Module (O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00001C02, 0x00001C02, 0x00001C02, 0x00001C02,
-                                               0x00001C02, 0x00001C02, 0x00001C02},
-                         },
-                         {
-                             .name = "GSP Module (N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20001C02, 0x20001C02, 0x20001C02, 0x20001C02,
-                                               0x20001C02, 0x20001C02, 0x20001C02},
-                         },
-                         {
-                             .name = "GSP Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00001C03, 0x00001C03, 0x00001C03, 0x00001C03,
-                                               0x00001C03, 0x00001C03, 0x00001C03},
-                         },
-                         {
-                             .name = "GSP Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20001C03, 0x20001C03, 0x20001C03, 0x20001C03,
-                                               0x20001C03, 0x20001C03, 0x20001C03},
-                         },
-                         {
-                             .name = "HID Module",
-                             .title_id_lows = {0x00001D02, 0x00001D02, 0x00001D02, 0x00001D02,
-                                               0x00001D02, 0x00001D02, 0x00001D02},
-                         },
-                         {
-                             .name = "HID Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00001D03, 0x00001D03, 0x00001D03, 0x00001D03,
-                                               0x00001D03, 0x00001D03, 0x00001D03},
-                         },
-                         {
-                             .name = "HID Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20001D03, 0x20001D03, 0x20001D03, 0x20001D03,
-                                               0x20001D03, 0x20001D03, 0x20001D03},
-                         },
-                         {
-                             .name = "I2C Module (O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00001E02, 0x00001E02, 0x00001E02, 0x00001E02,
-                                               0x00001E02, 0x00001E02, 0x00001E02},
-                         },
-                         {
-                             .name = "I2C Module (N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20001E02, 0x20001E02, 0x20001E02, 0x20001E02,
-                                               0x20001E02, 0x20001E02, 0x20001E02},
-                         },
-                         {
-                             .name = "I2C Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00001E03, 0x00001E03, 0x00001E03, 0x00001E03,
-                                               0x00001E03, 0x00001E03, 0x00001E03},
-                         },
-                         {
-                             .name = "I2C Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20001E03, 0x20001E03, 0x20001E03, 0x20001E03,
-                                               0x20001E03, 0x20001E03, 0x20001E03},
-                         },
-                         {
-                             .name = "MCU Module (O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00001F02, 0x00001F02, 0x00001F02, 0x00001F02,
-                                               0x00001F02, 0x00001F02, 0x00001F02},
-                         },
-                         {
-                             .name = "MCU Module (N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20001F02, 0x20001F02, 0x20001F02, 0x20001F02,
-                                               0x20001F02, 0x20001F02, 0x20001F02},
-                         },
-                         {
-                             .name = "MCU Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00001F03, 0x00001F03, 0x00001F03, 0x00001F03,
-                                               0x00001F03, 0x00001F03, 0x00001F03},
-                         },
-                         {
-                             .name = "MCU Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20001F03, 0x20001F03, 0x20001F03, 0x20001F03,
-                                               0x20001F03, 0x20001F03, 0x20001F03},
-                         },
-                         {
-                             .name = "MIC Module",
-                             .title_id_lows = {0x00002002, 0x00002002, 0x00002002, 0x00002002,
-                                               0x00002002, 0x00002002, 0x00002002},
-                         },
-                         {
-                             .name = "PDN Module",
-                             .title_id_lows = {0x00002102, 0x00002102, 0x00002102, 0x00002102,
-                                               0x00002102, 0x00002102, 0x00002102},
-                         },
-                         {
-                             .name = "PDN Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00002103, 0x00002103, 0x00002103, 0x00002103,
-                                               0x00002103, 0x00002103, 0x00002103},
-                         },
-                         {
-                             .name = "PDN Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20002103, 0x20002103, 0x20002103, 0x20002103,
-                                               0x20002103, 0x20002103, 0x20002103},
-                         },
-                         {
-                             .name = "PTM Module (O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00002202, 0x00002202, 0x00002202, 0x00002202,
-                                               0x00002202, 0x00002202, 0x00002202},
-                         },
-                         {
-                             .name = "PTM Module (N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20002202, 0x20002202, 0x20002202, 0x20002202,
-                                               0x20002202, 0x20002202, 0x20002202},
-                         },
-                         {
-                             .name = "PTM Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00002203, 0x00002203, 0x00002203, 0x00002203,
-                                               0x00002203, 0x00002203, 0x00002203},
-                         },
-                         {
-                             .name = "PTM Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20002203, 0x20002203, 0x20002203, 0x20002203,
-                                               0x20002203, 0x20002203, 0x20002203},
-                         },
-                         {
-                             .name = "SPI Module (O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00002302, 0x00002302, 0x00002302, 0x00002302,
-                                               0x00002302, 0x00002302, 0x00002302},
-                         },
-                         {
-                             .name = "SPI Module (N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20002302, 0x20002302, 0x20002302, 0x20002302,
-                                               0x20002302, 0x20002302, 0x20002302},
-                         },
-                         {
-                             .name = "SPI Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00002303, 0x00002303, 0x00002303, 0x00002303,
-                                               0x00002303, 0x00002303, 0x00002303},
-                         },
-                         {
-                             .name = "SPI Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20002303, 0x20002303, 0x20002303, 0x20002303,
-                                               0x20002303, 0x20002303, 0x20002303},
-                         },
-                         {
-                             .name = "AC Module",
-                             .title_id_lows = {0x00002402, 0x00002402, 0x00002402, 0x00002402,
-                                               0x00002402, 0x00002402, 0x00002402},
-                         },
-                         {
-                             .name = "AC Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00002403, 0x00002403, 0x00002403, 0x00002403,
-                                               0x00002403, 0x00002403, 0x00002403},
-                         },
-                         {
-                             .name = "AC Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20002403, 0x20002403, 0x20002403, 0x20002403,
-                                               0x20002403, 0x20002403, 0x20002403},
-                         },
-                         {
-                             .name = "CECD Module",
-                             .title_id_lows = {0x00002602, 0x00002602, 0x00002602, 0x00002602,
-                                               0x00002602, 0x00002602, 0x00002602},
-                         },
-                         {
-                             .name = "CSND Module",
-                             .title_id_lows = {0x00002702, 0x00002702, 0x00002702, 0x00002702,
-                                               0x00002702, 0x00002702, 0x00002702},
-                         },
-                         {
-                             .name = "CSND Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00002703, 0x00002703, 0x00002703, 0x00002703,
-                                               0x00002703, 0x00002703, 0x00002703},
-                         },
-                         {
-                             .name = "CSND Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20002703, 0x20002703, 0x20002703, 0x20002703,
-                                               0x20002703, 0x20002703, 0x20002703},
-                         },
-                         {
-                             .name = "DLP Module",
-                             .title_id_lows = {0x00002802, 0x00002802, 0x00002802, 0x00002802,
-                                               0x00002802, 0x00002802, 0x00002802},
-                         },
-                         {
-                             .name = "HTTP Module",
-                             .title_id_lows = {0x00002902, 0x00002902, 0x00002902, 0x00002902,
-                                               0x00002902, 0x00002902, 0x00002902},
-                         },
-                         {
-                             .name = "HTTP Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00002903, 0x00002903, 0x00002903, 0x00002903,
-                                               0x00002903, 0x00002903, 0x00002903},
-                         },
-                         {
-                             .name = "HTTP Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20002903, 0x20002903, 0x20002903, 0x20002903,
-                                               0x20002903, 0x20002903, 0x20002903},
-                         },
-                         {
-                             .name = "MP Module",
-                             .title_id_lows = {0x00002A02, 0x00002A02, 0x00002A02, 0x00002A02,
-                                               0x00002A02, 0x00002A02, 0x00002A02},
-                         },
-                         {
-                             .name = "MP Module (Safe Mode)",
-                             .title_id_lows = {0x00002A03, 0x00002A03, 0x00002A03, 0x00002A03,
-                                               0x00002A03, 0x00002A03, 0x00002A03},
-                         },
-                         {
-                             .name = "NDM Module",
-                             .title_id_lows = {0x00002B02, 0x00002B02, 0x00002B02, 0x00002B02,
-                                               0x00002B02, 0x00002B02, 0x00002B02},
-                         },
-                         {
-                             .name = "NIM Module",
-                             .title_id_lows = {0x00002C02, 0x00002C02, 0x00002C02, 0x00002C02,
-                                               0x00002C02, 0x00002C02, 0x00002C02},
-                         },
-                         {
-                             .name = "NIM Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00002C03, 0x00002C03, 0x00002C03, 0x00002C03, 0,
-                                               0, 0},
-                         },
-                         {
-                             .name = "NIM Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20002C03, 0x20002C03, 0x20002C03, 0x20002C03,
-                                               0x20002C03, 0x20002C03, 0x20002C03},
-                         },
-                         {
-                             .name = "NWM Module",
-                             .title_id_lows = {0x00002D02, 0x00002D02, 0x00002D02, 0x00002D02,
-                                               0x00002D02, 0x00002D02, 0x00002D02},
-                         },
-                         {
-                             .name = "NWM Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00002D03, 0x00002D03, 0x00002D03, 0x00002D03,
-                                               0x00002D03, 0x00002D03, 0x00002D03},
-                         },
-                         {
-                             .name = "NWM Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20002D03, 0x20002D03, 0x20002D03, 0x20002D03,
-                                               0x20002D03, 0x20002D03, 0x20002D03},
-                         },
-                         {
-                             .name = "Sockets Module",
-                             .title_id_lows = {0x00002E02, 0x00002E02, 0x00002E02, 0x00002E02,
-                                               0x00002E02, 0x00002E02, 0x00002E02},
-                         },
-                         {
-                             .name = "Sockets Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00002E03, 0x00002E03, 0x00002E03, 0x00002E03,
-                                               0x00002E03, 0x00002E03, 0x00002E03},
-                         },
-                         {
-                             .name = "Sockets Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20002E03, 0x20002E03, 0x20002E03, 0x20002E03,
-                                               0x20002E03, 0x20002E03, 0x20002E03},
-                         },
-                         {
-                             .name = "SSL Module",
-                             .title_id_lows = {0x00002F02, 0x00002F02, 0x00002F02, 0x00002F02,
-                                               0x00002F02, 0x00002F02, 0x00002F02},
-                         },
-                         {
-                             .name = "SSL Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00002F03, 0x00002F03, 0x00002F03, 0x00002F03,
-                                               0x00002F03, 0x00002F03, 0x00002F03},
-                         },
-                         {
-                             .name = "SSL Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20002F03, 0x20002F03, 0x20002F03, 0x20002F03,
-                                               0x20002F03, 0x20002F03, 0x20002F03},
-                         },
-                         {
-                             .name = "PS Module",
-                             .title_id_lows = {0x00003102, 0x00003102, 0x00003102, 0x00003102,
-                                               0x00003102, 0x00003102, 0x00003102},
-                         },
-                         {
-                             .name = "PS Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00003103, 0x00003103, 0x00003103, 0x00003103,
-                                               0x00003103, 0x00003103, 0x00003103},
-                         },
-                         {
-                             .name = "PS Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20003103, 0x20003103, 0x20003103, 0x20003103,
-                                               0x20003103, 0x20003103, 0x20003103},
-                         },
-                         {
-                             .name = "Friends Module",
-                             .title_id_lows = {0x00003202, 0x00003202, 0x00003202, 0x00003202,
-                                               0x00003202, 0x00003202, 0x00003202},
-                         },
-                         {
-                             .name = "Friends Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00003203, 0x00003203, 0x00003203, 0x00003203,
-                                               0x00003203, 0x00003203, 0x00003203},
-                         },
-                         {
-                             .name = "Friends Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20003203, 0x20003203, 0x20003203, 0x20003203,
-                                               0x20003203, 0x20003203, 0x20003203},
-                         },
-                         {
-                             .name = "IR Module",
-                             .title_id_lows = {0x00003302, 0x00003302, 0x00003302, 0x00003302,
-                                               0x00003302, 0x00003302, 0x00003302},
-                         },
-                         {
-                             .name = "IR Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00003303, 0x00003303, 0x00003303, 0x00003303,
-                                               0x00003303, 0x00003303, 0x00003303},
-                         },
-                         {
-                             .name = "IR Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20003303, 0x20003303, 0x20003303, 0x20003303,
-                                               0x20003303, 0x20003303, 0x20003303},
-                         },
-                         {
-                             .name = "BOSS Module",
-                             .title_id_lows = {0x00003402, 0x00003402, 0x00003402, 0x00003402,
-                                               0x00003402, 0x00003402, 0x00003402},
-                         },
-                         {
-                             .name = "News Module",
-                             .title_id_lows = {0x00003502, 0x00003502, 0x00003502, 0x00003502,
-                                               0x00003502, 0x00003502, 0x00003502},
-                         },
-                         {
-                             .name = "RO Module",
-                             .title_id_lows = {0x00003702, 0x00003702, 0x00003702, 0x00003702,
-                                               0x00003702, 0x00003702, 0x00003702},
-                         },
-                         {
-                             .name = "ACT Module",
-                             .title_id_lows = {0x00003802, 0x00003802, 0x00003802, 0x00003802,
-                                               0x00003802, 0x00003802, 0x00003802},
-                         },
-                         {
-                             .name = "NFC Module (O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00004002, 0x00004002, 0x00004002, 0x00004002,
-                                               0x00004002, 0x00004002, 0x00004002},
-                         },
-                         {
-                             .name = "NFC Module (N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20004002, 0x20004002, 0x20004002, 0x20004002,
-                                               0x20004002, 0x20004002, 0x20004002},
-                         },
-                         {
-                             .name = "MVD Module (N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20004102, 0x20004102, 0x20004102, 0x20004102,
-                                               0x20004102, 0x20004102, 0x20004102},
-                         },
-                         {
-                             .name = "QTM Module (N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20004202, 0x20004202, 0x20004202, 0x20004202,
-                                               0x20004202, 0x20004202, 0x20004202},
-                         },
-                         {
-                             .name = "NS Module",
-                             .title_id_lows = {0x00008002, 0x00008002, 0x00008002, 0x00008002,
-                                               0x00008002, 0x00008002, 0x00008002},
-                         },
-                         {
-                             .name = "NS Module (Safe Mode, O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00008003, 0x00008003, 0x00008003, 0x00008003, 0,
-                                               0, 0},
-                         },
-                         {
-                             .name = "NS Module (Safe Mode, N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20008003, 0x20008003, 0x20008003, 0x20008003,
-                                               0x20008003, 0x20008003, 0x20008003},
-                         },
-                     }},
-                {.name = "System Firmware",
-                 .title_id_high = 0x00040138,
-                 .titles =
-                     {
-                         {
-                             .name = "NATIVE_FIRM (O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00000002, 0x00000002, 0x00000002, 0x00000002,
-                                               0x00000002, 0x00000002, 0x00000002},
-                         },
-                         {
-                             .name = "NATIVE_FIRM (N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20000002, 0x20000002, 0x20000002, 0x20000002,
-                                               0x20000002, 0x20000002, 0x20000002},
-                         },
-                         {
-                             .name = "SAFE_MODE_FIRM (O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00000003, 0x00000003, 0x00000003, 0x00000003,
-                                               0x00000003, 0x00000003, 0x00000003},
-                         },
-                         {
-                             .name = "SAFE_MODE_FIRM (N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20000003, 0x20000003, 0x20000003, 0x20000003,
-                                               0x20000003, 0x20000003, 0x20000003},
-                         },
-                         {
-                             .name = "TWL_FIRM (O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00000102, 0x00000102, 0x00000102, 0x00000102,
-                                               0x00000102, 0x00000102, 0x00000102},
-                         },
-                         {
-                             .name = "TWL_FIRM (N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20000102, 0x20000102, 0x20000102, 0x20000102,
-                                               0x20000102, 0x20000102, 0x20000102},
-                         },
-                         {
-                             .name = "AGB_FIRM (O3DS)",
-                             .sets = SystemTitleSet::Old3ds,
-                             .title_id_lows = {0x00000202, 0x00000202, 0x00000202, 0x00000202, 0,
-                                               0x00000202, 0},
-                         },
-                         {
-                             .name = "AGB_FIRM (N3DS)",
-                             .sets = SystemTitleSet::New3ds,
-                             .title_id_lows = {0x20000202, 0x20000202, 0x20000202, 0x20000202,
-                                               0x20000202, 0x20000202, 0x20000202},
-                         },
-                     }},
-                {.name = "TWL System Applications",
-                 .title_id_high = 0x00048005,
-                 .titles =
-                     {
-                         {
-                             .name = "DS Internet",
-                             .title_id_lows = {0x42383841, 0x42383841, 0x42383841, 0x42383841,
-                                               0x42383841, 0x42383841, 0x42383841},
-                         },
-                         {
-                             .name = "DS Download Play",
-                             .title_id_lows = {0x484E4441, 0x484E4441, 0x484E4441, 0x484E4441,
-                                               0x484E4443, 0x484E444B, 0x484E4441},
-                         },
-                     }},
-                {.name = "TWL System Data Archives",
-                 .title_id_high = 0x0004800F,
-                 .titles =
-                     {
-                         {
-                             .name = "DS Card Whitelist",
-                             .title_id_lows = {0x484E4841, 0x484E4841, 0x484E4841, 0x484E4841,
-                                               0x484E4841, 0x484E4841, 0x484E4841},
-                         },
-                         {
-                             .name = "DS Version Data",
-                             .title_id_lows = {0x484E4C41, 0x484E4C41, 0x484E4C41, 0x484E4C41,
-                                               0x484E4C41, 0x484E4C41, 0x484E4C41},
-                         },
-                     }},
-            }};
+         {.name = "System Applications",
+          .title_id_high = 0x00040010,
+          .titles =
+          {
+           {
+            .name = "System Settings",
+            .title_id_lows = {0x00020000, 0x00021000, 0x00022000, 0x00022000,
+                              0x00026000, 0x00027000, 0x00028000},
+            },
+           {
+            .name = "Download Play",
+            .title_id_lows = {0x00020100, 0x00021100, 0x00022100, 0x00022100,
+                              0x00026100, 0x00027100, 0x00028100},
+            },
+           {
+            .name = "Activity Log",
+            .title_id_lows = {0x00020200, 0x00021200, 0x00022200, 0x00022200,
+                              0x00026200, 0x00027200, 0x00028200},
+            },
+           {
+            .name = "Health and Safety Information (O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00020300, 0x00021300, 0x00022300, 0x00022300,
+                              0x00026300, 0x00027300, 0x00028300},
+            },
+           {
+            .name = "Health and Safety Information (N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20020300, 0x20021300, 0x20022300, 0x20022300, 0,
+                              0x20027300, 0},
+            },
+           {
+            .name = "Nintendo 3DS Camera",
+            .title_id_lows = {0x00020400, 0x00021400, 0x00022400, 0x00022400,
+                              0x00026400, 0x00027400, 0x00028400},
+            },
+           {
+            .name = "Nintendo 3DS Sound",
+            .title_id_lows =
+            {0x00020500,
+             0x00021500, 0x00022500, 0x00022500, 0x00026500, 0x00027500, 0x00028500},
+            },
+           {
+            .name = "Mii Maker",
+            .title_id_lows =
+            {0x00020700,
+             0x00021700, 0x00022700, 0x00022700, 0x00026700, 0x00027700, 0x00028700},
+            },
+           {
+            .name = "StreetPass Mii Plaza",
+            .title_id_lows =
+            {0x00020800,
+             0x00021800, 0x00022800, 0x00022800, 0x00026800, 0x00027800, 0x00028800},
+            },
+           {
+            .name = "Nintendo eShop",
+            .title_id_lows = {0x00020900, 0x00021900, 0x00022900, 0x00022900, 0,
+                              0x00027900, 0x00028900},
+            },
+           {
+            .name = "System Transfer",
+            .title_id_lows = {0x00020A00, 0x00021A00, 0x00022A00, 0x00022A00, 0,
+                              0x00027A00, 0x00028A00},
+            },
+           {
+            .name = "Nintendo Zone",
+            .title_id_lows = {0x00020B00, 0x00021B00, 0x00022B00, 0x00022B00, 0,
+                              0, 0},
+            },
+           {
+            .name = "Face Raiders (O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows =
+            {0x00020D00,
+             0x00021D00, 0x00022D00, 0x00022D00, 0x00026D00, 0x00027D00, 0x00028D00},
+            },
+           {
+            .name = "Face Raiders (N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20020D00, 0x20021D00, 0x20022D00, 0x20022D00, 0,
+                              0x20027D00, 0},
+            },
+           {
+            .name = "AR Games",
+            .title_id_lows =
+            {0x00020E00,
+             0x00021E00, 0x00022E00, 0x00022E00, 0x00026E00, 0x00027E00, 0x00028E00},
+            },
+           {
+            .name = "System Updater (Safe Mode)",
+            .title_id_lows =
+            {0x00020F00,
+             0x00021F00, 0x00022F00, 0x00022F00, 0x00026F00, 0x00027F00, 0x00028F00},
+            },
+           {
+            .name = "Nintendo Network ID Settings",
+            .title_id_lows = {0x0002BF00, 0x0002C000, 0x0002C100, 0x0002C100, 0,
+                              0, 0},
+            },
+           {
+            .name = "microSD Management (N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20023100, 0x20024100, 0x20025100, 0x20025100, 0,
+                              0, 0},
+            },
+           {
+            .name = "HOME Menu Digital Manual (N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x2002C800, 0x2002CF00, 0x2002D000, 0x2002D000, 0,
+                              0x2002D700, 0},
+            },
+           {
+            .name = "Friends List Digital Manual (N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x2002C900, 0x2002D100, 0x2002D200, 0x2002D200, 0,
+                              0x2002D800, 0},
+            },
+           {
+            .name = "Notifications Digital Manual (N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x2002CA00, 0x2002D300, 0x2002D400, 0x2002D400, 0,
+                              0x2002D900, 0},
+            },
+           {
+               .name = "Game Notes Digital Manual (N3DS)",
+               .sets = SystemTitleSet::New3ds,
+               .title_id_lows = {0x2002CB00, 0x2002D500, 0x2002D600, 0x2002D600, 0,
+                                 0x2002DA00, 0},
+               },
+           }},
+         {.name = "System Data Archives",
+          .title_id_high = 0x0004001B,
+          .titles =
+          {
+           {
+            .name = "ClCertA",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0x00010002, 0x00010002, 0x00010002, 0x00010002,
+                              0x00010002, 0x00010002, 0x00010002},
+            },
+           {
+            .name = "NS CFA",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0x00010702, 0x00010702, 0x00010702, 0x00010702,
+                              0x00010702, 0x00010702, 0x00010702},
+            },
+           {
+            .name = "Dummy CFA",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0x00010802, 0x00010802, 0x00010802, 0x00010802,
+                              0x00010802, 0x00010802, 0x00010802},
+            },
+           {
+            .name = "NNID Web Browser Data",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0x00018002, 0x00018002, 0x00018002, 0x00018002,
+                              0x00018002, 0x00018002, 0x00018002},
+            },
+           {
+            .name = "Miiverse Offline Mode Web Browser Data",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0x00018102, 0x00018102, 0x00018102, 0x00018102,
+                              0x00018102, 0x00018102, 0x00018102},
+            },
+           {
+            .name = "NNID/Miiverse OSS CROs",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0x00018202, 0x00018202, 0x00018202, 0x00018202,
+                              0x00018202, 0x00018202, 0x00018202},
+            },
+           {
+               .name = "NFC Peripheral Firmware",
+               .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                       SystemTitleSet::Minimal,
+               .title_id_lows = {0x00019002, 0x00019002, 0x00019002, 0x00019002,
+                                 0x00019002, 0x00019002, 0x00019002},
+               },
+           }},
+         {.name = "System Applets",
+          .title_id_high = 0x00040030,
+          .titles =
+          {
+           home_menu_title,
+           {
+            .name = "Camera Applet",
+            .title_id_lows = {0x00008402, 0x00009002, 0x00009902, 0x00009902,
+                              0x0000A202, 0x0000AA02, 0x0000B202},
+            },
+           {
+            .name = "Instruction Manual",
+            .title_id_lows = {0x00008602, 0x00009202, 0x00009B02, 0x00009B02,
+                              0x0000A402, 0x0000AC02, 0x0000B402},
+            },
+           {
+            .name = "Game Notes",
+            .title_id_lows = {0x00008702, 0x00009302, 0x00009C02, 0x00009C02,
+                              0x0000A502, 0x0000AD02, 0x0000B502},
+            },
+           {
+            .name = "Internet Browser (O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00008802, 0x00009402, 0x00009D02, 0x00009D02,
+                              0x0000A602, 0x0000AE02, 0x0000B602},
+            },
+           {
+            .name = "Internet Browser (N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20008802, 0x20009402, 0x20009D02, 0x20009D02, 0,
+                              0x2000AE02, 0},
+            },
+           {
+            .name = "Error Display",
+            .title_id_lows = {0x00008A02, 0x00008A02, 0x00008A02, 0x00008A02,
+                              0x00008A02, 0x00008A02, 0x00008A02},
+            },
+           {
+            .name = "Error Display (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00008A03, 0x00008A03, 0x00008A03, 0x00008A03,
+                              0x00008A03, 0x00008A03, 0x00008A03},
+            },
+           {
+            .name = "Error Display (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20008A03, 0x20008A03, 0x20008A03, 0x20008A03,
+                              0x20008A03, 0x20008A03, 0x20008A03},
+            },
+           {
+            .name = "Friends List",
+            .title_id_lows = {0x00008D02, 0x00009602, 0x00009F02, 0x00009F02,
+                              0x0000A702, 0x0000AF02, 0x0000B702},
+            },
+           {
+            .name = "Notifications",
+            .title_id_lows = {0x00008E02, 0x00009702, 0x0000A002, 0x0000A002,
+                              0x0000A802, 0x0000B002, 0x0000B802},
+            },
+           {
+            .name = "Software Keyboard",
+            .title_id_lows = {0x0000C002, 0x0000C802, 0x0000D002, 0x0000D002,
+                              0x0000D802, 0x0000DE02, 0x0000E402},
+            },
+           {
+            .name = "Software Keyboard (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x0000C003, 0x0000C803, 0x0000D003, 0x0000D003,
+                              0x0000D803, 0x0000DE03, 0x0000E403},
+            },
+           {
+            .name = "Software Keyboard (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x2000C003, 0x2000C803, 0x2000D003, 0x2000D003, 0,
+                              0x2000DE03, 0},
+            },
+           {
+            .name = "Mii Picker",
+            .title_id_lows = {0x0000C102, 0x0000C902, 0x0000D102, 0x0000D102,
+                              0x0000D902, 0x0000DF02, 0x0000E502},
+            },
+           {
+            .name = "Photo Picker",
+            .title_id_lows = {0x0000C302, 0x0000CB02, 0x0000D302, 0x0000D302,
+                              0x0000DB02, 0x0000E102, 0x0000E702},
+            },
+           {
+            .name = "Sound Picker",
+            .title_id_lows = {0x0000C402, 0x0000CC02, 0x0000D402, 0x0000D402,
+                              0x0000DC02, 0x0000E202, 0x0000E802},
+            },
+           {
+            .name = "Error/EULA Display",
+            .title_id_lows = {0x0000C502, 0x0000C502, 0x0000C502, 0x0000C502,
+                              0x0000CF02, 0x0000CF02, 0x0000CF02},
+            },
+           {
+            .name = "Error/EULA Display (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x0000C503, 0x0000C503, 0x0000C503, 0x0000C503,
+                              0x0000CF03, 0x0000CF03, 0x0000CF03},
+            },
+           {
+            .name = "Error/EULA Display (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x2000C503, 0x2000C503, 0x2000C503, 0x2000C503,
+                              0x2000CF03, 0x2000CF03, 0x2000CF03},
+            },
+           {
+            .name = "Circle Pad Pro Calibration",
+            .title_id_lows = {0x0000CD02, 0x0000CD02, 0x0000CD02, 0x0000CD02,
+                              0x0000D502, 0x0000D502, 0x0000D502},
+            },
+           {
+            .name = "Nintendo eShop Applet",
+            .title_id_lows = {0x0000C602, 0x0000CE02, 0x0000D602, 0x0000D602, 0,
+                              0x0000E302, 0x0000E902},
+            },
+           {
+            .name = "Miiverse",
+            .title_id_lows = {0x0000BC02, 0x0000BD02, 0x0000BE02, 0x0000BE02, 0,
+                              0, 0},
+            },
+           {
+            .name = "Miiverse System Library",
+            .title_id_lows = {0x0000F602, 0x0000F602, 0x0000F602, 0x0000F602, 0,
+                              0, 0},
+            },
+           {
+            .name = "Miiverse Post Applet",
+            .title_id_lows = {0x00008302, 0x00008B02, 0x0000BA02, 0x0000BA02, 0,
+                              0, 0},
+            },
+           {
+               .name = "Amiibo Settings",
+               .title_id_lows = {0x00009502, 0x00009E02, 0x0000B902, 0x0000B902, 0,
+                                 0x00008C02, 0x0000BF02},
+               },
+           }},
+         {.name = "Shared Data Archives",
+          .title_id_high = 0x0004009B,
+          .titles =
+          {
+           {
+            .name = "CFL_Res.dat",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0x00010202, 0x00010202, 0x00010202, 0x00010202,
+                              0x00010202, 0x00010202, 0x00010202},
+            },
+           {
+            .name = "Region Manifest",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0x00010402, 0x00010402, 0x00010402, 0x00010402,
+                              0x00010402, 0x00010402, 0x00010402},
+            },
+           {
+            .name = "Public Root-CA Certificates",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0x00010602, 0x00010602, 0x00010602, 0x00010602,
+                              0x00010602, 0x00010602, 0x00010602},
+            },
+           {
+            .name = "CHN/CN Dictionary",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0, 0, 0, 0, 0x00011002, 0, 0},
+            },
+           {
+            .name = "TWN/TN Dictionary",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0, 0, 0, 0, 0, 0, 0x00011102},
+            },
+           {
+            .name = "NL/NL Dictionary",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0, 0, 0x00011202, 0x00011202, 0, 0, 0},
+            },
+           {
+            .name = "EN/GB Dictionary",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0, 0, 0x00011302, 0x00011302, 0, 0, 0},
+            },
+           {
+            .name = "EN/US Dictionary",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0, 0x00011402, 0, 0, 0, 0, 0},
+            },
+           {
+            .name = "FR/FR/regular Dictionary",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0, 0, 0x00011502, 0x00011502, 0, 0, 0},
+            },
+           {
+            .name = "FR/CA/regular Dictionary",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0, 0x00011602, 0, 0, 0, 0, 0},
+            },
+           {
+            .name = "DE/regular Dictionary",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0, 0, 0x00011702, 0x00011702, 0, 0, 0},
+            },
+           {
+            .name = "IT/IT Dictionary",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0, 0, 0x00011802, 0x00011802, 0, 0, 0},
+            },
+           {
+            .name = "JA_small/32 Dictionary",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0x00011902, 0, 0, 0, 0, 0, 0},
+            },
+           {
+            .name = "KO/KO Dictionary",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0, 0, 0, 0, 0, 0x00011A02, 0},
+            },
+           {
+            .name = "PT/PT/regular Dictionary",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0, 0, 0x00011B02, 0x00011B02, 0, 0, 0},
+            },
+           {
+            .name = "RU/regular Dictionary",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0, 0, 0x00011C02, 0x00011C02, 0, 0, 0},
+            },
+           {
+            .name = "ES/ES Dictionary",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0, 0x00011D02, 0x00011D02, 0x00011D02, 0, 0, 0},
+            },
+           {
+            .name = "PT/BR/regular Dictionary",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0, 0x00011E02, 0, 0, 0, 0, 0},
+            },
+           {
+            .name = "Error Strings",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0x00012202, 0x00012302, 0x00012102, 0x00012102,
+                              0x00012402, 0x00012502, 0x00012602},
+            },
+           {
+            .name = "EULA",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0x00013202, 0x00013302, 0x00013102, 0x00013102,
+                              0x00013502, 0, 0},
+            },
+           {
+            .name = "JPN/EUR/USA System Font",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0x00014002, 0x00014002, 0x00014002, 0x00014002,
+                              0x00014002, 0x00014002, 0x00014002},
+            },
+           {
+            .name = "CHN System Font",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0x00014102, 0x00014102, 0x00014102, 0x00014102,
+                              0x00014102, 0x00014102, 0x00014102},
+            },
+           {
+            .name = "KOR System Font",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0x00014202, 0x00014202, 0x00014202, 0x00014202,
+                              0x00014202, 0x00014202, 0x00014202},
+            },
+           {
+            .name = "TWN System Font",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0x00014302, 0x00014302, 0x00014302, 0x00014302,
+                              0x00014302, 0x00014302, 0x00014302},
+            },
+           {
+               .name = "Rate",
+               .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                       SystemTitleSet::Minimal,
+               .title_id_lows = {0x00015202, 0x00015302, 0x00015102, 0x00015102, 0,
+                                 0x00015502, 0x0015602},
+               },
+           }},
+         {.name = "System Data Archives",
+          .title_id_high = 0x000400DB,
+          .titles =
+          {
+           {
+            .name = "NGWord List",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0x00010302, 0x00010302, 0x00010302, 0x00010302,
+                              0x00010302, 0x00010302, 0x00010302},
+            },
+           {
+            .name = "Nintendo Zone Hotspot List",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                    SystemTitleSet::Minimal,
+            .title_id_lows = {0x00010502, 0x00010502, 0x00010502, 0x00010502,
+                              0x00010502, 0x00010502, 0x00010502},
+            },
+           {
+            .name = "NVer (O3DS)",
+            .sets = SystemTitleSet::Old3ds | SystemTitleSet::Minimal,
+            .title_id_lows = {0x00016202, 0x00016302, 0x00016102, 0x00016102,
+                              0x00016402, 0x00016502, 0x00016602},
+            },
+           {
+            .name = "NVer (N3DS)",
+            .sets = SystemTitleSet::New3ds | SystemTitleSet::Minimal,
+            .title_id_lows = {0x20016202, 0x20016302, 0x20016102, 0x20016102, 0,
+                              0x20016502, 0},
+            },
+           {
+               .name = "CVer",
+               .sets = SystemTitleSet::Old3ds | SystemTitleSet::New3ds |
+                       SystemTitleSet::Minimal,
+               .title_id_lows = {0x00017202, 0x00017302, 0x00017102, 0x00017102,
+                                 0x00017402, 0x00017502, 0x00017602},
+               },
+           }},
+         {.name = "System Modules",
+          .title_id_high = 0x00040130,
+          .titles =
+          {
+           {
+            .name = "AM Module",
+            .title_id_lows = {0x00001502, 0x00001502, 0x00001502, 0x00001502,
+                              0x00001502, 0x00001502, 0x00001502},
+            },
+           {
+            .name = "AM Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00001503, 0x00001503, 0x00001503, 0x00001503,
+                              0x00001503, 0x00001503, 0x00001503},
+            },
+           {
+            .name = "AM Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20001503, 0x20001503, 0x20001503, 0x20001503,
+                              0x20001503, 0x20001503, 0x20001503},
+            },
+           {
+            .name = "Camera Module (O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00001602, 0x00001602, 0x00001602, 0x00001602,
+                              0x00001602, 0x00001602, 0x00001602},
+            },
+           {
+            .name = "Camera Module (N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20001602, 0x20001602, 0x20001602, 0x20001602,
+                              0x20001602, 0x20001602, 0x20001602},
+            },
+           {
+            .name = "Config Module",
+            .title_id_lows = {0x00001702, 0x00001702, 0x00001702, 0x00001702,
+                              0x00001702, 0x00001702, 0x00001702},
+            },
+           {
+            .name = "Config Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00001703, 0x00001703, 0x00001703, 0x00001703,
+                              0x00001703, 0x00001703, 0x00001503},
+            },
+           {
+            .name = "Config Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20001703, 0x20001703, 0x20001703, 0x20001703,
+                              0x20001703, 0x20001703, 0x20001703},
+            },
+           {
+            .name = "Codec Module",
+            .title_id_lows = {0x00001802, 0x00001802, 0x00001802, 0x00001802,
+                              0x00001802, 0x00001802, 0x00001802},
+            },
+           {
+            .name = "Codec Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00001803, 0x00001803, 0x00001803, 0x00001803,
+                              0x00001803, 0x00001803, 0x00001803},
+            },
+           {
+            .name = "Codec Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20001803, 0x20001803, 0x20001803, 0x20001803,
+                              0x20001803, 0x20001803, 0x20001803},
+            },
+           {
+            .name = "DSP Module",
+            .title_id_lows = {0x00001A02, 0x00001A02, 0x00001A02, 0x00001A02,
+                              0x00001A02, 0x00001A02, 0x00001A02},
+            },
+           {
+            .name = "DSP Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00001A03, 0x00001A03, 0x00001A03, 0x00001A03,
+                              0x00001A03, 0x00001A03, 0x00001A03},
+            },
+           {
+            .name = "DSP Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20001A03, 0x20001A03, 0x20001A03, 0x20001A03,
+                              0x20001A03, 0x20001A03, 0x20001A03},
+            },
+           {
+            .name = "GPIO Module",
+            .title_id_lows = {0x00001B02, 0x00001B02, 0x00001B02, 0x00001B02,
+                              0x00001B02, 0x00001B02, 0x00001B02},
+            },
+           {
+            .name = "GPIO Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00001B03, 0x00001B03, 0x00001B03, 0x00001B03,
+                              0x00001B03, 0x00001B03, 0x00001B03},
+            },
+           {
+            .name = "GPIO Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20001B03, 0x20001B03, 0x20001B03, 0x20001B03,
+                              0x20001B03, 0x20001B03, 0x20001B03},
+            },
+           {
+            .name = "GSP Module (O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00001C02, 0x00001C02, 0x00001C02, 0x00001C02,
+                              0x00001C02, 0x00001C02, 0x00001C02},
+            },
+           {
+            .name = "GSP Module (N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20001C02, 0x20001C02, 0x20001C02, 0x20001C02,
+                              0x20001C02, 0x20001C02, 0x20001C02},
+            },
+           {
+            .name = "GSP Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00001C03, 0x00001C03, 0x00001C03, 0x00001C03,
+                              0x00001C03, 0x00001C03, 0x00001C03},
+            },
+           {
+            .name = "GSP Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20001C03, 0x20001C03, 0x20001C03, 0x20001C03,
+                              0x20001C03, 0x20001C03, 0x20001C03},
+            },
+           {
+            .name = "HID Module",
+            .title_id_lows = {0x00001D02, 0x00001D02, 0x00001D02, 0x00001D02,
+                              0x00001D02, 0x00001D02, 0x00001D02},
+            },
+           {
+            .name = "HID Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00001D03, 0x00001D03, 0x00001D03, 0x00001D03,
+                              0x00001D03, 0x00001D03, 0x00001D03},
+            },
+           {
+            .name = "HID Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20001D03, 0x20001D03, 0x20001D03, 0x20001D03,
+                              0x20001D03, 0x20001D03, 0x20001D03},
+            },
+           {
+            .name = "I2C Module (O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00001E02, 0x00001E02, 0x00001E02, 0x00001E02,
+                              0x00001E02, 0x00001E02, 0x00001E02},
+            },
+           {
+            .name = "I2C Module (N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20001E02, 0x20001E02, 0x20001E02, 0x20001E02,
+                              0x20001E02, 0x20001E02, 0x20001E02},
+            },
+           {
+            .name = "I2C Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00001E03, 0x00001E03, 0x00001E03, 0x00001E03,
+                              0x00001E03, 0x00001E03, 0x00001E03},
+            },
+           {
+            .name = "I2C Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20001E03, 0x20001E03, 0x20001E03, 0x20001E03,
+                              0x20001E03, 0x20001E03, 0x20001E03},
+            },
+           {
+            .name = "MCU Module (O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00001F02, 0x00001F02, 0x00001F02, 0x00001F02,
+                              0x00001F02, 0x00001F02, 0x00001F02},
+            },
+           {
+            .name = "MCU Module (N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20001F02, 0x20001F02, 0x20001F02, 0x20001F02,
+                              0x20001F02, 0x20001F02, 0x20001F02},
+            },
+           {
+            .name = "MCU Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00001F03, 0x00001F03, 0x00001F03, 0x00001F03,
+                              0x00001F03, 0x00001F03, 0x00001F03},
+            },
+           {
+            .name = "MCU Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20001F03, 0x20001F03, 0x20001F03, 0x20001F03,
+                              0x20001F03, 0x20001F03, 0x20001F03},
+            },
+           {
+            .name = "MIC Module",
+            .title_id_lows = {0x00002002, 0x00002002, 0x00002002, 0x00002002,
+                              0x00002002, 0x00002002, 0x00002002},
+            },
+           {
+            .name = "PDN Module",
+            .title_id_lows = {0x00002102, 0x00002102, 0x00002102, 0x00002102,
+                              0x00002102, 0x00002102, 0x00002102},
+            },
+           {
+            .name = "PDN Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00002103, 0x00002103, 0x00002103, 0x00002103,
+                              0x00002103, 0x00002103, 0x00002103},
+            },
+           {
+            .name = "PDN Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20002103, 0x20002103, 0x20002103, 0x20002103,
+                              0x20002103, 0x20002103, 0x20002103},
+            },
+           {
+            .name = "PTM Module (O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00002202, 0x00002202, 0x00002202, 0x00002202,
+                              0x00002202, 0x00002202, 0x00002202},
+            },
+           {
+            .name = "PTM Module (N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20002202, 0x20002202, 0x20002202, 0x20002202,
+                              0x20002202, 0x20002202, 0x20002202},
+            },
+           {
+            .name = "PTM Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00002203, 0x00002203, 0x00002203, 0x00002203,
+                              0x00002203, 0x00002203, 0x00002203},
+            },
+           {
+            .name = "PTM Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20002203, 0x20002203, 0x20002203, 0x20002203,
+                              0x20002203, 0x20002203, 0x20002203},
+            },
+           {
+            .name = "SPI Module (O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00002302, 0x00002302, 0x00002302, 0x00002302,
+                              0x00002302, 0x00002302, 0x00002302},
+            },
+           {
+            .name = "SPI Module (N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20002302, 0x20002302, 0x20002302, 0x20002302,
+                              0x20002302, 0x20002302, 0x20002302},
+            },
+           {
+            .name = "SPI Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00002303, 0x00002303, 0x00002303, 0x00002303,
+                              0x00002303, 0x00002303, 0x00002303},
+            },
+           {
+            .name = "SPI Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20002303, 0x20002303, 0x20002303, 0x20002303,
+                              0x20002303, 0x20002303, 0x20002303},
+            },
+           {
+            .name = "AC Module",
+            .title_id_lows = {0x00002402, 0x00002402, 0x00002402, 0x00002402,
+                              0x00002402, 0x00002402, 0x00002402},
+            },
+           {
+            .name = "AC Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00002403, 0x00002403, 0x00002403, 0x00002403,
+                              0x00002403, 0x00002403, 0x00002403},
+            },
+           {
+            .name = "AC Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20002403, 0x20002403, 0x20002403, 0x20002403,
+                              0x20002403, 0x20002403, 0x20002403},
+            },
+           {
+            .name = "CECD Module",
+            .title_id_lows = {0x00002602, 0x00002602, 0x00002602, 0x00002602,
+                              0x00002602, 0x00002602, 0x00002602},
+            },
+           {
+            .name = "CSND Module",
+            .title_id_lows = {0x00002702, 0x00002702, 0x00002702, 0x00002702,
+                              0x00002702, 0x00002702, 0x00002702},
+            },
+           {
+            .name = "CSND Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00002703, 0x00002703, 0x00002703, 0x00002703,
+                              0x00002703, 0x00002703, 0x00002703},
+            },
+           {
+            .name = "CSND Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20002703, 0x20002703, 0x20002703, 0x20002703,
+                              0x20002703, 0x20002703, 0x20002703},
+            },
+           {
+            .name = "DLP Module",
+            .title_id_lows = {0x00002802, 0x00002802, 0x00002802, 0x00002802,
+                              0x00002802, 0x00002802, 0x00002802},
+            },
+           {
+            .name = "HTTP Module",
+            .title_id_lows = {0x00002902, 0x00002902, 0x00002902, 0x00002902,
+                              0x00002902, 0x00002902, 0x00002902},
+            },
+           {
+            .name = "HTTP Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00002903, 0x00002903, 0x00002903, 0x00002903,
+                              0x00002903, 0x00002903, 0x00002903},
+            },
+           {
+            .name = "HTTP Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20002903, 0x20002903, 0x20002903, 0x20002903,
+                              0x20002903, 0x20002903, 0x20002903},
+            },
+           {
+            .name = "MP Module",
+            .title_id_lows = {0x00002A02, 0x00002A02, 0x00002A02, 0x00002A02,
+                              0x00002A02, 0x00002A02, 0x00002A02},
+            },
+           {
+            .name = "MP Module (Safe Mode)",
+            .title_id_lows = {0x00002A03, 0x00002A03, 0x00002A03, 0x00002A03,
+                              0x00002A03, 0x00002A03, 0x00002A03},
+            },
+           {
+            .name = "NDM Module",
+            .title_id_lows = {0x00002B02, 0x00002B02, 0x00002B02, 0x00002B02,
+                              0x00002B02, 0x00002B02, 0x00002B02},
+            },
+           {
+            .name = "NIM Module",
+            .title_id_lows = {0x00002C02, 0x00002C02, 0x00002C02, 0x00002C02,
+                              0x00002C02, 0x00002C02, 0x00002C02},
+            },
+           {
+            .name = "NIM Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00002C03, 0x00002C03, 0x00002C03, 0x00002C03,
+                              0x00002C03, 0x00002C03, 0x00002C03},
+            },
+           {
+            .name = "NIM Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20002C03, 0x20002C03, 0x20002C03, 0x20002C03,
+                              0x20002C03, 0x20002C03, 0x20002C03},
+            },
+           {
+            .name = "NWM Module",
+            .title_id_lows = {0x00002D02, 0x00002D02, 0x00002D02, 0x00002D02,
+                              0x00002D02, 0x00002D02, 0x00002D02},
+            },
+           {
+            .name = "NWM Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00002D03, 0x00002D03, 0x00002D03, 0x00002D03,
+                              0x00002D03, 0x00002D03, 0x00002D03},
+            },
+           {
+            .name = "NWM Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20002D03, 0x20002D03, 0x20002D03, 0x20002D03,
+                              0x20002D03, 0x20002D03, 0x20002D03},
+            },
+           {
+            .name = "Sockets Module",
+            .title_id_lows = {0x00002E02, 0x00002E02, 0x00002E02, 0x00002E02,
+                              0x00002E02, 0x00002E02, 0x00002E02},
+            },
+           {
+            .name = "Sockets Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00002E03, 0x00002E03, 0x00002E03, 0x00002E03,
+                              0x00002E03, 0x00002E03, 0x00002E03},
+            },
+           {
+            .name = "Sockets Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20002E03, 0x20002E03, 0x20002E03, 0x20002E03,
+                              0x20002E03, 0x20002E03, 0x20002E03},
+            },
+           {
+            .name = "SSL Module",
+            .title_id_lows = {0x00002F02, 0x00002F02, 0x00002F02, 0x00002F02,
+                              0x00002F02, 0x00002F02, 0x00002F02},
+            },
+           {
+            .name = "SSL Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00002F03, 0x00002F03, 0x00002F03, 0x00002F03,
+                              0x00002F03, 0x00002F03, 0x00002F03},
+            },
+           {
+            .name = "SSL Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20002F03, 0x20002F03, 0x20002F03, 0x20002F03,
+                              0x20002F03, 0x20002F03, 0x20002F03},
+            },
+           {
+            .name = "PS Module",
+            .title_id_lows = {0x00003102, 0x00003102, 0x00003102, 0x00003102,
+                              0x00003102, 0x00003102, 0x00003102},
+            },
+           {
+            .name = "PS Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00003103, 0x00003103, 0x00003103, 0x00003103,
+                              0x00003103, 0x00003103, 0x00003103},
+            },
+           {
+            .name = "PS Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20003103, 0x20003103, 0x20003103, 0x20003103,
+                              0x20003103, 0x20003103, 0x20003103},
+            },
+           {
+            .name = "Friends Module",
+            .title_id_lows = {0x00003202, 0x00003202, 0x00003202, 0x00003202,
+                              0x00003202, 0x00003202, 0x00003202},
+            },
+           {
+            .name = "Friends Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00003203, 0x00003203, 0x00003203, 0x00003203,
+                              0x00003203, 0x00003203, 0x00003203},
+            },
+           {
+            .name = "Friends Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20003203, 0x20003203, 0x20003203, 0x20003203,
+                              0x20003203, 0x20003203, 0x20003203},
+            },
+           {
+            .name = "IR Module",
+            .title_id_lows = {0x00003302, 0x00003302, 0x00003302, 0x00003302,
+                              0x00003302, 0x00003302, 0x00003302},
+            },
+           {
+            .name = "IR Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00003303, 0x00003303, 0x00003303, 0x00003303,
+                              0x00003303, 0x00003303, 0x00003303},
+            },
+           {
+            .name = "IR Module (Safe Mode, N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20003303, 0x20003303, 0x20003303, 0x20003303,
+                              0x20003303, 0x20003303, 0x20003303},
+            },
+           {
+            .name = "BOSS Module",
+            .title_id_lows = {0x00003402, 0x00003402, 0x00003402, 0x00003402,
+                              0x00003402, 0x00003402, 0x00003402},
+            },
+           {
+            .name = "News Module",
+            .title_id_lows = {0x00003502, 0x00003502, 0x00003502, 0x00003502,
+                              0x00003502, 0x00003502, 0x00003502},
+            },
+           {
+            .name = "RO Module",
+            .title_id_lows = {0x00003702, 0x00003702, 0x00003702, 0x00003702,
+                              0x00003702, 0x00003702, 0x00003702},
+            },
+           {
+            .name = "ACT Module",
+            .title_id_lows = {0x00003802, 0x00003802, 0x00003802, 0x00003802,
+                              0x00003802, 0x00003802, 0x00003802},
+            },
+           {
+            .name = "NFC Module (O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00004002, 0x00004002, 0x00004002, 0x00004002,
+                              0x00004002, 0x00004002, 0x00004002},
+            },
+           {
+            .name = "NFC Module (N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20004002, 0x20004002, 0x20004002, 0x20004002,
+                              0x20004002, 0x20004002, 0x20004002},
+            },
+           {
+            .name = "MVD Module (N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20004102, 0x20004102, 0x20004102, 0x20004102,
+                              0x20004102, 0x20004102, 0x20004102},
+            },
+           {
+            .name = "QTM Module (N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20004202, 0x20004202, 0x20004202, 0x20004202,
+                              0x20004202, 0x20004202, 0x20004202},
+            },
+           {
+            .name = "NS Module",
+            .title_id_lows = {0x00008002, 0x00008002, 0x00008002, 0x00008002,
+                              0x00008002, 0x00008002, 0x00008002},
+            },
+           {
+            .name = "NS Module (Safe Mode, O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00008003, 0x00008003, 0x00008003, 0x00008003,
+                              0x00008003, 0x00008003, 0x00008003},
+            },
+           {
+               .name = "NS Module (Safe Mode, N3DS)",
+               .sets = SystemTitleSet::New3ds,
+               .title_id_lows = {0x20008003, 0x20008003, 0x20008003, 0x20008003,
+                                 0x20008003, 0x20008003, 0x20008003},
+               },
+           }},
+         {.name = "System Firmware",
+          .title_id_high = 0x00040138,
+          .titles =
+          {
+           {
+            .name = "NATIVE_FIRM (O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00000002, 0x00000002, 0x00000002, 0x00000002,
+                              0x00000002, 0x00000002, 0x00000002},
+            },
+           {
+            .name = "NATIVE_FIRM (N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20000002, 0x20000002, 0x20000002, 0x20000002,
+                              0x20000002, 0x20000002, 0x20000002},
+            },
+           {
+            .name = "SAFE_MODE_FIRM (O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00000003, 0x00000003, 0x00000003, 0x00000003,
+                              0x00000003, 0x00000003, 0x00000003},
+            },
+           {
+            .name = "SAFE_MODE_FIRM (N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20000003, 0x20000003, 0x20000003, 0x20000003,
+                              0x20000003, 0x20000003, 0x20000003},
+            },
+           {
+            .name = "TWL_FIRM (O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00000102, 0x00000102, 0x00000102, 0x00000102,
+                              0x00000102, 0x00000102, 0x00000102},
+            },
+           {
+            .name = "TWL_FIRM (N3DS)",
+            .sets = SystemTitleSet::New3ds,
+            .title_id_lows = {0x20000102, 0x20000102, 0x20000102, 0x20000102,
+                              0x20000102, 0x20000102, 0x20000102},
+            },
+           {
+            .name = "AGB_FIRM (O3DS)",
+            .sets = SystemTitleSet::Old3ds,
+            .title_id_lows = {0x00000202, 0x00000202, 0x00000202, 0x00000202,
+                              0x00000202, 0x00000202, 0x00000202},
+            },
+           {
+               .name = "AGB_FIRM (N3DS)",
+               .sets = SystemTitleSet::New3ds,
+               .title_id_lows = {0x20000202, 0x20000202, 0x20000202, 0x20000202,
+                                 0x20000202, 0x20000202, 0x20000202},
+               },
+           }},
+         {.name = "TWL System Applications",
+          .title_id_high = 0x00048005,
+          .titles =
+          {
+           {
+            .name = "DS Internet",
+            .title_id_lows = {0x42383841, 0x42383841, 0x42383841, 0x42383841,
+                              0x42383841, 0x42383841, 0x42383841},
+            },
+           {
+               .name = "DS Download Play",
+               .title_id_lows = {0x484E4441, 0x484E4441, 0x484E4441, 0x484E4441,
+                                 0x484E4443, 0x484E444B, 0x484E4441},
+               },
+           }},
+         {.name = "TWL System Data Archives",
+          .title_id_high = 0x0004800F,
+          .titles =
+          {
+              {
+               .name = "DS Card Whitelist",
+               .title_id_lows = {0x484E4841, 0x484E4841, 0x484E4841, 0x484E4841,
+                                 0x484E4841, 0x484E4841, 0x484E4841},
+               },
+              {
+               .name = "DS Version Data",
+               .title_id_lows = {0x484E4C41, 0x484E4C41, 0x484E4C41, 0x484E4C41,
+                                 0x484E4C41, 0x484E4C41, 0x484E4C41},
+               },
+              }},
+         }};

-std::vector<u64> GetSystemTitleIds(SystemTitleSet set, u32 region) {
+std::vector<u64> GetSystemTitleIds(SystemTitleSet set, u32 region)
+{
     std::vector<u64> title_ids;
     for (const auto& category : system_titles) {
         for (const auto& title : category.titles) {
             if ((title.sets & set) != 0 && title.title_id_lows[region] != 0) {
-                title_ids.push_back((static_cast<u64>(category.title_id_high) << 32) |
-                                    static_cast<u64>(title.title_id_lows[region]));
+                title_ids.push_back((static_cast<u64>(category.title_id_high) << 32)
+                                    | static_cast<u64>(title.title_id_lows[region]));
             }
         }
     }
@@ -1177,19 +1179,23 @@ std::vector<u64> GetSystemTitleIds(SystemTitleSet set, u32 region) {
     return title_ids;
 }

-u64 GetHomeMenuTitleId(u32 region) {
-    return (static_cast<u64>(home_menu_title_id_high) << 32) |
-           static_cast<u64>(home_menu_title.title_id_lows[region]);
+u64 GetHomeMenuTitleId(u32 region)
+{
+    return (static_cast<u64>(home_menu_title_id_high) << 32)
+           | static_cast<u64>(home_menu_title.title_id_lows[region]);
 }

-std::string GetHomeMenuNcchPath(u32 region) {
+std::string GetHomeMenuNcchPath(u32 region)
+{
     return Service::AM::GetTitleContentPath(Service::FS::MediaType::NAND,
                                             GetHomeMenuTitleId(region));
 }

-std::optional<u32> GetSystemTitleRegion(u64 title_id) {
+std::optional<u32> GetSystemTitleRegion(u64 title_id)
+{
     const auto title_id_high = static_cast<u32>(title_id >> 32);
-    const auto category = std::find_if(system_titles.begin(), system_titles.end(),
+    const auto category = std::find_if(system_titles.begin(),
+                                       system_titles.end(),
                                        [title_id_high](const SystemTitleCategory& category) {
                                            return category.title_id_high == title_id_high;
                                        });
@@ -1209,26 +1215,22 @@ std::optional<u32> GetSystemTitleRegion(u64 title_id) {
     return std::nullopt;
 }

-std::pair<bool, bool> AreSystemTitlesInstalled() {
+std::pair<bool, bool> AreSystemTitlesInstalled()
+{
     std::array<u32, NUM_SYSTEM_TITLE_REGIONS> o_installed_titles{};
     std::array<u32, NUM_SYSTEM_TITLE_REGIONS> o_total_titles{};

     std::array<u32, NUM_SYSTEM_TITLE_REGIONS> n_installed_titles{};
     std::array<u32, NUM_SYSTEM_TITLE_REGIONS> n_total_titles{};

-    static const char* region_names[NUM_SYSTEM_TITLE_REGIONS] = {
-        "JPN", "USA", "EUR", "AUS", "CHN", "KOR", "TWN",
-    };
-
     for (auto categ = system_titles.begin(); categ != system_titles.end(); categ++) {
         for (auto title = categ->titles.begin(); title != categ->titles.end(); title++) {
-
             for (u32 i = 0; i < NUM_SYSTEM_TITLE_REGIONS; i++) {
                 if (title->title_id_lows[i] == 0) {
                     continue;
                 }
-                u64 program_id =
-                    static_cast<u64>(categ->title_id_high) << 32 | title->title_id_lows[i];
+                u64 program_id = static_cast<u64>(categ->title_id_high) << 32
+                                 | title->title_id_lows[i];
                 if (title->sets & SystemTitleSet::Old3ds) {
                     o_total_titles[i]++;
                 }
@@ -1239,21 +1241,14 @@ std::pair<bool, bool> AreSystemTitlesInstalled() {
                 // TODO(PabloMK7) Switch to a better solution once available, so it's not as slow as
                 // checking everything
                 if (FileUtil::Exists(Service::AM::GetTitleMetadataPath(Service::FS::MediaType::NAND,
-                                                                       program_id, false))) {
+                                                                       program_id,
+                                                                       false))) {
                     if (title->sets & SystemTitleSet::Old3ds) {
                         o_installed_titles[i]++;
                     }
                     if (title->sets & SystemTitleSet::New3ds) {
                         n_installed_titles[i]++;
                     }
-                } else {
-                    std::string set = (title->sets & SystemTitleSet::Old3ds) ? "O3DS" : "";
-                    if (title->sets & SystemTitleSet::New3ds) {
-                        set += set.empty() ? "N3DS" : "/N3DS";
-                    }
-
-                    LOG_DEBUG(Service_AM, "{}, {}, {}, {} not found", categ->name, title->name,
-                              region_names[i], set);
                 }
             }
         }
@@ -1265,39 +1260,33 @@ std::pair<bool, bool> AreSystemTitlesInstalled() {
     for (size_t i = 0; i < o_installed_titles.size(); i++) {
         if (o_installed_titles[i] == o_total_titles[i]) {
             o_all = true;
-            // CHN/TWN don't have n3ds variants
-            if (i == HW::UniqueData::Region::CHN || i == HW::UniqueData::Region::TWN) {
-                n_all = true;
-            }
             break;
         }
     }
-    if (!n_all) {
-        for (size_t i = 0; i < n_installed_titles.size(); i++) {
-            if (n_installed_titles[i] == n_total_titles[i]) {
-                n_all = true;
-                break;
-            }
+    for (size_t i = 0; i < n_installed_titles.size(); i++) {
+        if (n_installed_titles[i] == n_total_titles[i]) {
+            n_all = true;
+            break;
         }
     }

     return std::make_pair(o_all, n_all);
 }

-void UninstallSystemFiles(SystemTitleSet set) {
+void UninstallSystemFiles(SystemTitleSet set)
+{
     for (auto categ = system_titles.begin(); categ != system_titles.end(); categ++) {
         for (auto title = categ->titles.begin(); title != categ->titles.end(); title++) {
-            if (((set & SystemTitleSet::Old3ds) != 0 &&
-                 (title->sets & SystemTitleSet::Old3ds) != 0) ||
-                ((set & SystemTitleSet::New3ds) != 0 &&
-                 (title->sets & (SystemTitleSet::Old3ds | SystemTitleSet::New3ds)) ==
-                     SystemTitleSet::New3ds)) {
+            if (((set & SystemTitleSet::Old3ds) != 0 && (title->sets & SystemTitleSet::Old3ds) != 0)
+                || ((set & SystemTitleSet::New3ds) != 0
+                    && (title->sets & (SystemTitleSet::Old3ds | SystemTitleSet::New3ds))
+                           == SystemTitleSet::New3ds)) {
                 for (u32 i = 0; i < NUM_SYSTEM_TITLE_REGIONS; i++) {
                     if (title->title_id_lows[i] == 0) {
                         continue;
                     }
-                    u64 program_id =
-                        static_cast<u64>(categ->title_id_high) << 32 | title->title_id_lows[i];
+                    u64 program_id = static_cast<u64>(categ->title_id_high) << 32
+                                     | title->title_id_lows[i];
                     Service::AM::UninstallProgram(Service::FS::MediaType::NAND, program_id);
                 }
             }
diff --git a/src/core/hw/aes/key.cpp b/src/core/hw/aes/key.cpp
index 3e2a9cee1..a709be01a 100644
--- a/src/core/hw/aes/key.cpp
+++ b/src/core/hw/aes/key.cpp
@@ -2,13 +2,7 @@
 // Licensed under GPLv2 or any later version
 // Refer to the license.txt file included.

-#include <algorithm>
-#include <optional>
-#include <sstream>
-#include <boost/iostreams/device/file_descriptor.hpp>
-#include <boost/iostreams/stream.hpp>
-#include <cryptopp/aes.h>
-#include <cryptopp/modes.h>
+#include "core/hw/aes/key.h"
 #include "common/common_paths.h"
 #include "common/file_util.h"
 #include "common/logging/log.h"
@@ -17,10 +11,16 @@
 #include "core/file_sys/otp.h"
 #include "core/hle/service/fs/archive.h"
 #include "core/hw/aes/arithmetic128.h"
-#include "core/hw/aes/key.h"
 #include "core/hw/default_keys.h"
 #include "core/hw/rsa/rsa.h"
 #include "core/loader/loader.h"
+#include <algorithm>
+#include <boost/iostreams/device/file_descriptor.hpp>
+#include <boost/iostreams/stream.hpp>
+#include <cryptopp/aes.h>
+#include <cryptopp/modes.h>
+#include <optional>
+#include <sstream>

 namespace HW::AES {

@@ -32,12 +32,13 @@ namespace {
 // On a real 3DS the generation for the normal key is hardware based, and thus the constant can't
 // get dumped. Generated normal keys are also not accessible on a 3DS. The used formula for
 // calculating the constant is a software implementation of what the hardware generator does.
-//AESKey generator_constant;
+AESKey generator_constant;

-constexpr AESKey generator_constant = {{0x1F, 0xF9, 0xE9, 0xAA, 0xC5, 0xFE, 0x04, 0x08, 0x02, 0x45,
-                                        0x91, 0xDC, 0x5D, 0x52, 0x76, 0x8A}};
+//constexpr AESKey generator_constant = {{0x1F, 0xF9, 0xE9, 0xAA, 0xC5, 0xFE, 0x04, 0x08, 0x02, 0x45,
+//                                        0x91, 0xDC, 0x5D, 0x52, 0x76, 0x8A}};

-AESKey HexToKey(const std::string& hex) {
+AESKey HexToKey(const std::string& hex)
+{
     if (hex.size() < 32) {
         throw std::invalid_argument("hex string is too short");
     }
@@ -50,7 +51,8 @@ AESKey HexToKey(const std::string& hex) {
     return key;
 }

-std::vector<u8> HexToVector(const std::string& hex) {
+std::vector<u8> HexToVector(const std::string& hex)
+{
     std::vector<u8> vector(hex.size() / 2);
     for (std::size_t i = 0; i < vector.size(); ++i) {
         vector[i] = static_cast<u8>(std::stoi(hex.substr(i * 2, 2), nullptr, 16));
@@ -59,19 +61,20 @@ std::vector<u8> HexToVector(const std::string& hex) {
     return vector;
 }

-std::optional<std::size_t> ParseCommonKeyName(const std::string& full_name) {
+std::optional<std::size_t> ParseCommonKeyName(const std::string& full_name)
+{
     std::size_t index;
     int end;
-    if (std::sscanf(full_name.c_str(), "common%zd%n", &index, &end) == 1 &&
-        end == static_cast<int>(full_name.size())) {
+    if (std::sscanf(full_name.c_str(), "common%zd%n", &index, &end) == 1
+        && end == static_cast<int>(full_name.size())) {
         return index;
     } else {
         return std::nullopt;
     }
 }

-std::optional<std::pair<std::size_t, std::string>> ParseNfcSecretName(
-    const std::string& full_name) {
+std::optional<std::pair<std::size_t, std::string>> ParseNfcSecretName(const std::string& full_name)
+{
     std::size_t index;
     int end;
     if (std::sscanf(full_name.c_str(), "nfcSecret%zd%n", &index, &end) == 1) {
@@ -81,38 +84,41 @@ std::optional<std::pair<std::size_t, std::string>> ParseNfcSecretName(
     }
 }

-std::optional<std::pair<std::size_t, char>> ParseKeySlotName(const std::string& full_name) {
+std::optional<std::pair<std::size_t, char>> ParseKeySlotName(const std::string& full_name)
+{
     std::size_t slot;
     char type;
     int end;
-    if (std::sscanf(full_name.c_str(), "slot0x%zXKey%c%n", &slot, &type, &end) == 2 &&
-        end == static_cast<int>(full_name.size())) {
+    if (std::sscanf(full_name.c_str(), "slot0x%zXKey%c%n", &slot, &type, &end) == 2
+        && end == static_cast<int>(full_name.size())) {
         return std::make_pair(slot, type);
     } else {
         return std::nullopt;
     }
 }

-struct KeySlot {
+struct KeySlot
+{
     std::optional<AESKey> x;
     std::optional<AESKey> y;
     std::optional<AESKey> normal;

-    void SetKeyX(std::optional<AESKey> key) {
+    void SetKeyX(std::optional<AESKey> key)
+    {
         x = key;
         GenerateNormalKey();
     }

-    void SetKeyY(std::optional<AESKey> key) {
+    void SetKeyY(std::optional<AESKey> key)
+    {
         y = key;
         GenerateNormalKey();
     }

-    void SetNormalKey(std::optional<AESKey> key) {
-        normal = key;
-    }
+    void SetNormalKey(std::optional<AESKey> key) { normal = key; }

-    void GenerateNormalKey() {
+    void GenerateNormalKey()
+    {
         if (x && y) {
             normal = Lrot128(Add128(Xor128(Lrot128(*x, 2), *y), generator_constant), 87);
         } else {
@@ -120,7 +126,8 @@ struct KeySlot {
         }
     }

-    void Clear() {
+    void Clear()
+    {
         x.reset();
         y.reset();
         normal.reset();
@@ -139,14 +146,16 @@ AESIV otp_iv;
 KeySlot movable_key;
 KeySlot movable_cmac;

-struct KeyDesc {
+struct KeyDesc
+{
     char key_type;
     std::size_t slot_id;
     // This key is identical to the key with the same key_type and slot_id -1
     bool same_as_before;
 };

-void LoadBootromKeys() {
+void LoadBootromKeys()
+{
     constexpr std::array<KeyDesc, 80> keys = {
         {{'X', 0x2C, false}, {'X', 0x2D, true},  {'X', 0x2E, true},  {'X', 0x2F, true},
          {'X', 0x30, false}, {'X', 0x31, true},  {'X', 0x32, true},  {'X', 0x33, true},
@@ -217,8 +226,8 @@ void LoadBootromKeys() {
     }
 }

-#ifdef todotodo
-void LoadPresetKeys() {
+void LoadPresetKeys()
+{
     auto s = GetKeysStream();

     std::string mode = "";
@@ -227,6 +236,8 @@ void LoadPresetKeys() {
         std::string line;
         std::getline(s, line);

+        //	LOG_ERROR(HW_AES, "Dump key '{}'", line);
+
         // Ignore empty or commented lines.
         if (line.empty() || line.starts_with("#")) {
             continue;
@@ -351,8 +362,9 @@ void LoadPresetKeys() {
         }
     }
 }
-#else
-void LoadPresetKeys() {
+
+void LoadPresetAesKeys()
+{
     const std::string filepath = FileUtil::GetUserPath(FileUtil::UserPath::SysDataDir) + AES_KEYS;
     FileUtil::CreateFullPath(filepath); // Create path if not already created

@@ -456,11 +468,11 @@ void LoadPresetKeys() {
         }
     }
 }
-#endif

 } // namespace

-std::istringstream GetKeysStream() {
+std::istringstream GetKeysStream()
+{
     const std::string filepath = FileUtil::GetUserPath(FileUtil::UserPath::SysDataDir) + KEYS_FILE;
     FileUtil::CreateFullPath(filepath); // Create path if not already created

@@ -472,6 +484,122 @@ std::istringstream GetKeysStream() {
     } else {
         // The key data is encrypted in the source to prevent easy access to it for unintended
         // purposes.
+        /*
+        Here it is in clear because obfuscating stuff in an open source project is unhinged:
+:AES
+# Generator constant
+generatorConstant=1ff9e9aac5fe0408024591dc5d52768a
+# OTP
+otpKey=06457901d485a367ac4f2ad01c53cf74
+otpIV=ba4f599b0ae1122c80e13f6865c4fa49
+# Movable
+movableKeyY=a717802dea9776137ba16cd389141cf0
+movableCmacY=6e1e6bcb9ee098dd67ae771ad73b2cc9
+# KeyX
+slot0x18KeyX=82e9c9bebfb8bdb875ecc0a07d474374
+slot0x19KeyX=f5367fce73142e66ed13917914b7f2ef
+slot0x1AKeyX=eaba984c9cb766d4a3a7e974e2e713a3
+slot0x1BKeyX=45ad04953992c7c893724a9a7bce6182
+slot0x1CKeyX=c3830f8156e3543b723f0bc046741e8f
+slot0x1DKeyX=d6b38bc759417596d619d6029d13e0d8
+slot0x1EKeyX=bb623a97ddd793d757c4104b8d9fb969
+slot0x1FKeyX=4c28ec6effa3c23646078bba350c7995
+slot0x25KeyX=cee7d8ab30c00dae850ef5e382ac5af3
+slot0x2CKeyX=b98e95ceca3e4d171f76a94de934c053
+slot0x2DKeyX=b98e95ceca3e4d171f76a94de934c053
+slot0x2EKeyX=b98e95ceca3e4d171f76a94de934c053
+slot0x2FKeyX=b98e95ceca3e4d171f76a94de934c053
+slot0x30KeyX=c66e23128f289133f04cdb877a3749f2
+slot0x31KeyX=c66e23128f289133f04cdb877a3749f2
+slot0x32KeyX=c66e23128f289133f04cdb877a3749f2
+slot0x33KeyX=c66e23128f289133f04cdb877a3749f2
+slot0x34KeyX=6fbb01f872caf9c01834eec04065ee53
+slot0x35KeyX=6fbb01f872caf9c01834eec04065ee53
+slot0x36KeyX=6fbb01f872caf9c01834eec04065ee53
+slot0x37KeyX=6fbb01f872caf9c01834eec04065ee53
+slot0x38KeyX=b529221cddb5db5a1bf26eff2041e875
+slot0x39KeyX=b529221cddb5db5a1bf26eff2041e875
+slot0x3AKeyX=b529221cddb5db5a1bf26eff2041e875
+slot0x3BKeyX=b529221cddb5db5a1bf26eff2041e875
+slot0x3CKeyX=c35d6d15680b1ad4e912a341836121b3
+slot0x3DKeyX=617085719b7cfb316df4df2e8362c6e2
+slot0x3EKeyX=24baf628d06889bf282d0aa35dc55650
+slot0x3FKeyX=a31233280bb4daa7761393f78c424952
+# KeyY
+slot0x04KeyY=ff3388ecd21705bb339e967986dc4907
+slot0x05KeyY=54ef035f30260e0e9b5e004fc985dc22
+slot0x06KeyY=24b05aaaac0b099252030c02d1040317
+slot0x07KeyY=e9acc5abd4ad3f0660c83c8934882f3f
+slot0x08KeyY=4803050106d482dcd75f85c5aadff9b3
+slot0x09KeyY=af6346efdddfa9806e3c6b6855b78930
+slot0x0AKeyY=0a870a2c4b2fc3172e5f0335d8c5085d
+slot0x0BKeyY=fda0152fcd6ddb3133b887ba727c0ada
+slot0x24KeyY=74ca074884f4228deb2a1ca72d287762
+slot0x2EKeyY=7462553f9e5a7904b8647cca736da1f5
+slot0x2FKeyY=c369baa21e188a88a9aa94e5506a9f16
+slot0x31KeyY=7462553f9e5a7904b8647cca736da1f5
+# DLP/NFC KeyY (slot 0x39)
+dlpKeyY=7462553f9e5a7904b8647cca736da1f5
+nfcKeyY=ed7858a8bba7eed7fc970c5979bc0af2
+# Ticket Common KeyY (slot 0x3D)
+common0=d07b337f9ca4385932a2e25723232eb9
+common1=0c767230f0998f1c46828202faacbe4c
+common2=c475cb3ab8c788bb575e12a10907b8a4
+common3=e486eee3d0c09c902f6686d4c06f649f
+common4=ed31ba9c04b067506c4497a35b7804fc
+common5=5e66998ab4e8931606850fd7a16dd755
+# KeyN
+slot0x0CKeyN=e7c9ff9d4f5b6f4dc5e2f50e856f0ab2
+slot0x0DKeyN=e7c9ff9d4f5b6f4dc5e2f50e856f0ab2
+slot0x0EKeyN=e7c9ff9d4f5b6f4dc5e2f50e856f0ab2
+slot0x0FKeyN=e7c9ff9d4f5b6f4dc5e2f50e856f0ab2
+slot0x10KeyN=285713db53051c089bdfb3b6aa638fda
+slot0x11KeyN=285713db53051c089bdfb3b6aa638fda
+slot0x12KeyN=285713db53051c089bdfb3b6aa638fda
+slot0x13KeyN=285713db53051c089bdfb3b6aa638fda
+slot0x14KeyN=2af3bbd32cd59c06fd4abe58651987ad
+slot0x15KeyN=be2836751c734ba8da18e1887f888bd6
+slot0x16KeyN=e3a18eb1c1dc8a3d27c3967e6e362de3
+slot0x17KeyN=d0294cfb7be0b4fb7324d986fd3993bb
+slot0x20KeyN=7c92f6272551c4614db0b345edd2e869
+slot0x21KeyN=7c92f6272551c4614db0b345edd2e869
+slot0x22KeyN=7c92f6272551c4614db0b345edd2e869
+slot0x23KeyN=7c92f6272551c4614db0b345edd2e869
+slot0x26KeyN=bbe8b4e09d0937816b234d8eb3cd3ca2
+slot0x27KeyN=bbe8b4e09d0937816b234d8eb3cd3ca2
+slot0x28KeyN=bbe8b4e09d0937816b234d8eb3cd3ca2
+slot0x29KeyN=5218127e133ce3b85bb8c018ce76b7e2
+slot0x2AKeyN=4a4264cf32e84170666f29ac88ef3f7e
+slot0x2BKeyN=51af6c4c8b13da3228bd29b371cf84e1
+slot0x2DKeyN=3ed6f5cf2cc37c54655000b7c8b52e0d
+slot0x32KeyN=b87e64018b190ffe048a8124c6454196
+slot0x36KeyN=28c0d59b736657bcdf50ff174979958a
+slot0x38KeyN=6e78a3be9bddda09bfd569483f24fce0
+# NFC Secrets
+nfcSecret0Phrase=756e666978656420696e666f7300
+nfcSecret0Seed=db4b9e3f45278f397eff9b4fb993
+nfcSecret0HmacKey=1d164b375b72a55728b91d64b6a3c205
+nfcSecret1Phrase=6c6f636b65642073656372657400
+nfcSecret1Seed=fdc8a07694b89e4c47d37de8ce5c74c1
+nfcSecret1HmacKey=7f752d2873a20017fef85c0575904b6d
+nfcIv=4fd39a6e79fceaad99904db8ee38e9db
+:RSA
+# Slots
+slot0x00X=c034829a11c7116a08633e89a78ca0919779da8cc967077afc60e1786247e5068b9a76588a15f0304b3887b5147c259f7a2e6e480aceb0be35f0c5885ea2d8838fd6aafe45ac58fc08d4d0569d3cd3b09f9c6985fcd5c7152ebc54a885d6b11129b503611510bbfa0b07552d5800ecf636ef90d101cd475a3f4274e0c1e828b2bb516c8cd80f95f5db6a239083435509c0190e5d218b19c3bebc2a3aa73cebf53e7e4998d9be01a440f3f1c0f3157ba6f65a7be9e059d4d26f9de997141979df2ceaa175d91db2079051978f805d6f97741b6db4e96e3305611392b4b7ca76f0b45387c40d5879cde6b1509062216cb9ac21f3510ccd6df4da8f581ff86d2f31
+slot0x00M=c12e4877ff0fedb98afa6dbe5d7ac86489a4e0901dba22d2e7ba945c830126ca71976f284a5e57e386b4778fbb78e3f1750ecd8b6ed3984f3cd363f801dd9ed5271ea859f49ff4da02d88445efba774b3a46279167cb905300d0903ecb71772b78cfe918921e2bef699f87d9cbef273fbc0e320d177e925021e869bb827f227f17da206ae9ce5de262566c4fab0be86866f7218fd48c248c0d8cbdeb3adbc423a6cd1b572f82c0172d23e32b1b4f0c30b04c20749126851dba39b31a2918c23f91034969e601c0a1099742e8fd31cfe4a02cd9e6bd7b646c52465567c7463b2a9e7e9fa53a0e260d4daee68091ee7adfa1c1491538276161e1c10293f4592a33
+# Ticket wrap
+ticketWrapExp=010001
+ticketWrapMod=d24cb2e48feaf004d4bb08f8f3defcbb0c934a146b15366c9ddc1eb1649b9feb964b569c2283954d3d2b8a1ab21dc1159c2e6cb4cdd4c0bb96dbad4f02d31f45573892af855273aca20c459b9bd3126425c05d766bfd2fad87986c08416aea8d4266cd9d4ffc3f20f7b5672b686793141edde1b11689aca2f6469c9b0ea4577150235185ed4e7e4f2f9036c165a20c73e160c644a47303d2ed9bb0ba2fc90989bd87eb4563d8f7a61d889a7807b155e7f2107d048d828fcba23090839341385614fde4fabe84f2f0532da34750f32ab11fbe084c0083edbf0b50e96a49dd9d1e293e2249ee954db8afd139461ead4f11a2d06836446473140ed3867e4e5ead3b
+# Secure info
+secureInfoExp=010001
+secureInfoMod=b1791a6d1eadd429ba89a1cd433630174bc68730c5e70560197b50d8c4546710a6e8a101bc2ceb0376f005c70ce0b6d6dffd26df33468bdbb2391e7ec01aa1a5a091e807da378676ba390a25429d5961e161d40485a74bb20186beb11a3572c1c2ea28ab7a1015325c9e712b7df965eae6c6fb8baed76c2a94a6c5ece40eaf987e06f20f884fd20635a476e9f70aba5c5b1461520054044593e468270435355aad5809d1193f5a0728d6db6b551f77945dc3be6fae5bcc0863e476dfa29b36ea853403e616eaa905e07f3a3e7e7077cf166a61d17e4d354c744485d4f67b0eee32f1c2d5790248e9621a33baa39b02b02294057ff6b43888e301e55a237c9c0b
+# Local friend code seed
+lfcsExp=010001
+lfcsMod=a3759a3546cfa7fe30ec55a1b64e08e9449d0c72fcd191fd610a288975bce6a9b21556e9c7670255adfc3cee5edb78259a4b221b71e7e9515b2a6793b21868ce5e5e12ffd86806af318d56f9549902346a17e7837496a05aaf6efde6bed686aafd7a65a8ebe11c983a15c17ab540c23d9b7cfdd463c5e6deb77824c629473335b2e937e054ee9fa53dd793ca3eae4db60f5a11e70cdfba03b21e2b31b65906db5f940bf76e74cad4ab55d940058f10fe06050c81bb422190ba4f5c5382e1e10fbc949f60695d1303aae2e0c108424c200b9baa552d55276e24e5d60457588ff75f0cec819f6d2d28f31055f83b7662d4e4a69369b5da6b4023af07eb9cbfa9c9
+:ECC
+# Root public
+rootPublicXY=004e3bb74d5d959e68ce900434fe9e4a3f094a33771fa7c0e4b023264d98014ca1fc799d3fa52171d5f9bd5b1777ec0fef7a38d1669bbf830325843a
+        */
         std::vector<u8> kiv(16);
         std::string s(default_keys_enc_size, ' ');
         CryptoPP::CBC_Mode<CryptoPP::AES>::Decryption(kiv.data(), kiv.size(), kiv.data())
@@ -480,7 +608,8 @@ std::istringstream GetKeysStream() {
     }
 }

-void InitKeys(bool force) {
+void InitKeys(bool force)
+{
     static bool initialized = false;
     if (initialized && !force) {
         return;
@@ -488,7 +617,9 @@ void InitKeys(bool force) {
     initialized = true;
     HW::RSA::InitSlots();
     LoadBootromKeys();
+    generator_constant = HexToKey("1ff9e9aac5fe0408024591dc5d52768a");
     LoadPresetKeys();
+    LoadPresetAesKeys();
     movable_key.SetKeyX(key_slots[0x35].x);
     movable_cmac.SetKeyX(key_slots[0x35].x);

@@ -496,61 +627,72 @@ void InitKeys(bool force) {
     HW::ECC::InitSlots();
 }

-void SetKeyX(std::size_t slot_id, const AESKey& key) {
+void SetKeyX(std::size_t slot_id, const AESKey& key)
+{
     key_slots.at(slot_id).SetKeyX(key);
 }

-void SetKeyY(std::size_t slot_id, const AESKey& key) {
+void SetKeyY(std::size_t slot_id, const AESKey& key)
+{
     key_slots.at(slot_id).SetKeyY(key);
 }

-void SetNormalKey(std::size_t slot_id, const AESKey& key) {
+void SetNormalKey(std::size_t slot_id, const AESKey& key)
+{
     key_slots.at(slot_id).SetNormalKey(key);
 }

-bool IsKeyXAvailable(std::size_t slot_id) {
+bool IsKeyXAvailable(std::size_t slot_id)
+{
     return key_slots.at(slot_id).x.has_value();
 }

-bool IsNormalKeyAvailable(std::size_t slot_id) {
+bool IsNormalKeyAvailable(std::size_t slot_id)
+{
     return key_slots.at(slot_id).normal.has_value();
 }

-AESKey GetNormalKey(std::size_t slot_id) {
+AESKey GetNormalKey(std::size_t slot_id)
+{
     return key_slots.at(slot_id).normal.value_or(AESKey{});
 }

-void SelectCommonKeyIndex(u8 index) {
+void SelectCommonKeyIndex(u8 index)
+{
     key_slots[KeySlotID::TicketCommonKey].SetKeyY(common_key_y_slots.at(index));
 }

-void SelectDlpNfcKeyYIndex(u8 index) {
+void SelectDlpNfcKeyYIndex(u8 index)
+{
     key_slots[KeySlotID::DLPNFCDataKey].SetKeyY(dlp_nfc_key_y_slots.at(index));
 }

-bool NfcSecretsAvailable() {
-    auto missing_secret =
-        std::find_if(nfc_secrets.begin(), nfc_secrets.end(), [](auto& nfc_secret) {
-            return nfc_secret.phrase.empty() || nfc_secret.seed.empty() ||
-                   nfc_secret.hmac_key.empty();
-        });
+bool NfcSecretsAvailable()
+{
+    auto missing_secret = std::find_if(nfc_secrets.begin(), nfc_secrets.end(), [](auto& nfc_secret) {
+        return nfc_secret.phrase.empty() || nfc_secret.seed.empty() || nfc_secret.hmac_key.empty();
+    });
     SelectDlpNfcKeyYIndex(DlpNfcKeyY::Nfc);
     return IsNormalKeyAvailable(KeySlotID::DLPNFCDataKey) && missing_secret == nfc_secrets.end();
 }

-const NfcSecret& GetNfcSecret(NfcSecretId secret_id) {
+const NfcSecret& GetNfcSecret(NfcSecretId secret_id)
+{
     return nfc_secrets[secret_id];
 }

-const AESIV& GetNfcIv() {
+const AESIV& GetNfcIv()
+{
     return nfc_iv;
 }

-std::pair<AESKey, AESIV> GetOTPKeyIV() {
+std::pair<AESKey, AESIV> GetOTPKeyIV()
+{
     return {otp_key, otp_iv};
 }

-const AESKey& GetMovableKey(bool cmac_key) {
+const AESKey& GetMovableKey(bool cmac_key)
+{
     return cmac_key ? movable_cmac.normal.value() : movable_key.normal.value();
 }

diff --git a/src/core/system_titles.h b/src/core/system_titles.h
index 9eb7caab8..e56e3687e 100644
--- a/src/core/system_titles.h
+++ b/src/core/system_titles.h
@@ -4,10 +4,11 @@

 #pragma once

+#include "common/common_types.h"
 #include <optional>
+#include <string>
 #include <utility>
 #include <vector>
-#include "common/common_types.h"

 namespace Core {

