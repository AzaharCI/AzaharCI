diff --git a/src/android/app/src/main/java/org/citra/citra_emu/fragments/DownloadSystemFilesDialogFragment.kt b/src/android/app/src/main/java/org/citra/citra_emu/fragments/DownloadSystemFilesDialogFragment.kt
new file mode 100644
index 000000000..3f5abfd14
--- /dev/null
+++ b/src/android/app/src/main/java/org/citra/citra_emu/fragments/DownloadSystemFilesDialogFragment.kt
@@ -0,0 +1,152 @@
+// Copyright 2023 Citra Emulator Project
+// Licensed under GPLv2 or any later version
+// Refer to the license.txt file included.
+
+package org.citra.citra_emu.fragments
+
+import android.app.Dialog
+import android.os.Bundle
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.appcompat.app.AlertDialog
+import androidx.fragment.app.DialogFragment
+import androidx.fragment.app.activityViewModels
+import androidx.lifecycle.Lifecycle
+import androidx.lifecycle.lifecycleScope
+import androidx.lifecycle.repeatOnLifecycle
+import com.google.android.material.dialog.MaterialAlertDialogBuilder
+import kotlinx.coroutines.flow.collect
+import kotlinx.coroutines.flow.collectLatest
+import kotlinx.coroutines.launch
+import org.citra.citra_emu.NativeLibrary.InstallStatus
+import org.citra.citra_emu.R
+import org.citra.citra_emu.databinding.DialogProgressBarBinding
+import org.citra.citra_emu.viewmodel.GamesViewModel
+import org.citra.citra_emu.viewmodel.SystemFilesViewModel
+
+class DownloadSystemFilesDialogFragment : DialogFragment() {
+    private var _binding: DialogProgressBarBinding? = null
+    private val binding get() = _binding!!
+
+    private val downloadViewModel: SystemFilesViewModel by activityViewModels()
+    private val gamesViewModel: GamesViewModel by activityViewModels()
+
+    private lateinit var titles: LongArray
+
+    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {
+        _binding = DialogProgressBarBinding.inflate(layoutInflater)
+
+        titles = requireArguments().getLongArray(TITLES)!!
+
+        binding.progressText.visibility = View.GONE
+
+        binding.progressBar.min = 0
+        binding.progressBar.max = titles.size
+        if (downloadViewModel.isDownloading.value != true) {
+            binding.progressBar.progress = 0
+        }
+
+        isCancelable = false
+        return MaterialAlertDialogBuilder(requireContext())
+            .setView(binding.root)
+            .setTitle(R.string.downloading_files)
+            .setMessage(R.string.downloading_files_description)
+            .setNegativeButton(android.R.string.cancel, null)
+            .create()
+    }
+
+    override fun onCreateView(
+        inflater: LayoutInflater,
+        container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View {
+        return binding.root
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+        viewLifecycleOwner.lifecycleScope.apply {
+            launch {
+                repeatOnLifecycle(Lifecycle.State.CREATED) {
+                    downloadViewModel.progress.collectLatest { binding.progressBar.progress = it }
+                }
+            }
+            launch {
+                repeatOnLifecycle(Lifecycle.State.CREATED) {
+                    downloadViewModel.result.collect {
+                        when (it) {
+                            InstallStatus.Success -> {
+                                downloadViewModel.clear()
+                                dismiss()
+                                MessageDialogFragment.newInstance(R.string.download_success, 0)
+                                    .show(requireActivity().supportFragmentManager, MessageDialogFragment.TAG)
+                                gamesViewModel.setShouldSwapData(true)
+                            }
+
+                            InstallStatus.ErrorFailedToOpenFile,
+                            InstallStatus.ErrorEncrypted,
+                            InstallStatus.ErrorFileNotFound,
+                            InstallStatus.ErrorInvalid,
+                            InstallStatus.ErrorAborted -> {
+                                downloadViewModel.clear()
+                                dismiss()
+                                MessageDialogFragment.newInstance(
+                                    R.string.download_failed,
+                                    R.string.download_failed_description
+                                ).show(requireActivity().supportFragmentManager, MessageDialogFragment.TAG)
+                                gamesViewModel.setShouldSwapData(true)
+                            }
+
+                            InstallStatus.Cancelled -> {
+                                downloadViewModel.clear()
+                                dismiss()
+                                MessageDialogFragment.newInstance(
+                                    R.string.download_cancelled,
+                                    R.string.download_cancelled_description
+                                ).show(requireActivity().supportFragmentManager, MessageDialogFragment.TAG)
+                            }
+
+                            // Do nothing on null
+                            else -> {}
+                        }
+                    }
+                }
+            }
+        }
+
+        // Consider using WorkManager here. While the home menu can only really amount to
+        // about 150MBs, this could be a problem on inconsistent networks
+        downloadViewModel.download(titles)
+    }
+
+    override fun onResume() {
+        super.onResume()
+        val alertDialog = dialog as AlertDialog
+        val negativeButton = alertDialog.getButton(Dialog.BUTTON_NEGATIVE)
+        negativeButton.setOnClickListener {
+            downloadViewModel.cancel()
+            dialog?.setTitle(R.string.cancelling)
+            binding.progressBar.isIndeterminate = true
+        }
+    }
+
+    override fun onDestroyView() {
+        super.onDestroyView()
+        _binding = null
+    }
+
+    companion object {
+        const val TAG = "DownloadSystemFilesDialogFragment"
+
+        const val TITLES = "Titles"
+
+        fun newInstance(titles: LongArray): DownloadSystemFilesDialogFragment {
+            val dialog = DownloadSystemFilesDialogFragment()
+            val args = Bundle()
+            args.putLongArray(TITLES, titles)
+            dialog.arguments = args
+            return dialog
+        }
+    }
+}
diff --git a/src/android/app/src/main/java/org/citra/citra_emu/viewmodel/SystemFilesViewModel.kt b/src/android/app/src/main/java/org/citra/citra_emu/viewmodel/SystemFilesViewModel.kt
new file mode 100644
index 000000000..d4f654d5c
--- /dev/null
+++ b/src/android/app/src/main/java/org/citra/citra_emu/viewmodel/SystemFilesViewModel.kt
@@ -0,0 +1,139 @@
+// Copyright 2023 Citra Emulator Project
+// Licensed under GPLv2 or any later version
+// Refer to the license.txt file included.
+
+package org.citra.citra_emu.viewmodel
+
+import androidx.lifecycle.ViewModel
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.Job
+import kotlinx.coroutines.cancelChildren
+import kotlinx.coroutines.delay
+import kotlinx.coroutines.flow.MutableStateFlow
+import kotlinx.coroutines.flow.asStateFlow
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.yield
+import org.citra.citra_emu.NativeLibrary
+import org.citra.citra_emu.NativeLibrary.InstallStatus
+import org.citra.citra_emu.utils.Log
+import java.util.concurrent.atomic.AtomicInteger
+import kotlin.coroutines.CoroutineContext
+import kotlin.math.min
+
+class SystemFilesViewModel : ViewModel() {
+    private var job: Job
+    private val coroutineContext: CoroutineContext
+        get() = Dispatchers.IO + job
+
+    val isDownloading get() = _isDownloading.asStateFlow()
+    private val _isDownloading = MutableStateFlow(false)
+
+    val progress get() = _progress.asStateFlow()
+    private val _progress = MutableStateFlow(0)
+
+    val result get() = _result.asStateFlow()
+    private val _result = MutableStateFlow<InstallStatus?>(null)
+
+    val shouldRefresh get() = _shouldRefresh.asStateFlow()
+    private val _shouldRefresh = MutableStateFlow(false)
+
+    private var cancelled = false
+
+    private val RETRY_AMOUNT = 3
+
+    init {
+        job = Job()
+        clear()
+    }
+
+    fun setShouldRefresh(refresh: Boolean) {
+        _shouldRefresh.value = refresh
+    }
+
+    fun setProgress(progress: Int) {
+        _progress.value = progress
+    }
+
+    fun download(titles: LongArray) {
+        if (isDownloading.value) {
+            return
+        }
+        clear()
+        _isDownloading.value = true
+        Log.debug("System menu download started.")
+
+        val minExecutors = min(Runtime.getRuntime().availableProcessors(), titles.size)
+        val segment = (titles.size / minExecutors)
+        val atomicProgress = AtomicInteger(0)
+        for (i in 0 until minExecutors) {
+            val titlesSegment = if (i < minExecutors - 1) {
+                titles.copyOfRange(i * segment, (i + 1) * segment)
+            } else {
+                titles.copyOfRange(i * segment, titles.size)
+            }
+
+            CoroutineScope(coroutineContext).launch {
+                titlesSegment.forEach { title: Long ->
+                    // Notify UI of cancellation before ending coroutine
+                    if (cancelled) {
+                        _result.value = InstallStatus.ErrorAborted
+                        cancelled = false
+                    }
+
+                    // Takes a moment to see if the coroutine was cancelled
+                    yield()
+
+                    // Retry downloading a title repeatedly
+                    for (j in 0 until RETRY_AMOUNT) {
+                        val result = tryDownloadTitle(title)
+                        if (result == InstallStatus.Success) {
+                            break
+                        } else if (j == RETRY_AMOUNT - 1) {
+                            _result.value = result
+                            return@launch
+                        }
+                        Log.warning("Download for title{$title} failed, retrying in 3s...")
+                        delay(3000L)
+                    }
+
+                    Log.debug("Successfully installed title - $title")
+                    setProgress(atomicProgress.incrementAndGet())
+
+                    Log.debug("System File Progress - ${atomicProgress.get()} / ${titles.size}")
+                    if (atomicProgress.get() == titles.size) {
+                        _result.value = InstallStatus.Success
+                        setShouldRefresh(true)
+                    }
+                }
+            }
+        }
+    }
+
+    private fun tryDownloadTitle(title: Long): InstallStatus {
+        val result = NativeLibrary.downloadTitleFromNus(title)
+        if (result != InstallStatus.Success) {
+            Log.error("Failed to install title $title with error - $result")
+        }
+        return result
+    }
+
+    fun clear() {
+        Log.debug("Clearing")
+        job.cancelChildren()
+        job = Job()
+        _progress.value = 0
+        _result.value = null
+        _isDownloading.value = false
+        cancelled = false
+    }
+
+    fun cancel() {
+        Log.debug("Canceling system file download.")
+        cancelled = true
+        job.cancelChildren()
+        job = Job()
+        _progress.value = 0
+        _result.value = InstallStatus.Cancelled
+    }
+}
diff --git a/src/android/app/src/main/java/org/citra/citra_emu/fragments/DownloadSystemFilesDialogFragment.kt b/src/android/app/src/main/java/org/citra/citra_emu/fragments/DownloadSystemFilesDialogFragment.kt
new file mode 100644
index 000000000..3f5abfd14
--- /dev/null
+++ b/src/android/app/src/main/java/org/citra/citra_emu/fragments/DownloadSystemFilesDialogFragment.kt
@@ -0,0 +1,152 @@
+// Copyright 2023 Citra Emulator Project
+// Licensed under GPLv2 or any later version
+// Refer to the license.txt file included.
+
+package org.citra.citra_emu.fragments
+
+import android.app.Dialog
+import android.os.Bundle
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.appcompat.app.AlertDialog
+import androidx.fragment.app.DialogFragment
+import androidx.fragment.app.activityViewModels
+import androidx.lifecycle.Lifecycle
+import androidx.lifecycle.lifecycleScope
+import androidx.lifecycle.repeatOnLifecycle
+import com.google.android.material.dialog.MaterialAlertDialogBuilder
+import kotlinx.coroutines.flow.collect
+import kotlinx.coroutines.flow.collectLatest
+import kotlinx.coroutines.launch
+import org.citra.citra_emu.NativeLibrary.InstallStatus
+import org.citra.citra_emu.R
+import org.citra.citra_emu.databinding.DialogProgressBarBinding
+import org.citra.citra_emu.viewmodel.GamesViewModel
+import org.citra.citra_emu.viewmodel.SystemFilesViewModel
+
+class DownloadSystemFilesDialogFragment : DialogFragment() {
+    private var _binding: DialogProgressBarBinding? = null
+    private val binding get() = _binding!!
+
+    private val downloadViewModel: SystemFilesViewModel by activityViewModels()
+    private val gamesViewModel: GamesViewModel by activityViewModels()
+
+    private lateinit var titles: LongArray
+
+    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {
+        _binding = DialogProgressBarBinding.inflate(layoutInflater)
+
+        titles = requireArguments().getLongArray(TITLES)!!
+
+        binding.progressText.visibility = View.GONE
+
+        binding.progressBar.min = 0
+        binding.progressBar.max = titles.size
+        if (downloadViewModel.isDownloading.value != true) {
+            binding.progressBar.progress = 0
+        }
+
+        isCancelable = false
+        return MaterialAlertDialogBuilder(requireContext())
+            .setView(binding.root)
+            .setTitle(R.string.downloading_files)
+            .setMessage(R.string.downloading_files_description)
+            .setNegativeButton(android.R.string.cancel, null)
+            .create()
+    }
+
+    override fun onCreateView(
+        inflater: LayoutInflater,
+        container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View {
+        return binding.root
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+        viewLifecycleOwner.lifecycleScope.apply {
+            launch {
+                repeatOnLifecycle(Lifecycle.State.CREATED) {
+                    downloadViewModel.progress.collectLatest { binding.progressBar.progress = it }
+                }
+            }
+            launch {
+                repeatOnLifecycle(Lifecycle.State.CREATED) {
+                    downloadViewModel.result.collect {
+                        when (it) {
+                            InstallStatus.Success -> {
+                                downloadViewModel.clear()
+                                dismiss()
+                                MessageDialogFragment.newInstance(R.string.download_success, 0)
+                                    .show(requireActivity().supportFragmentManager, MessageDialogFragment.TAG)
+                                gamesViewModel.setShouldSwapData(true)
+                            }
+
+                            InstallStatus.ErrorFailedToOpenFile,
+                            InstallStatus.ErrorEncrypted,
+                            InstallStatus.ErrorFileNotFound,
+                            InstallStatus.ErrorInvalid,
+                            InstallStatus.ErrorAborted -> {
+                                downloadViewModel.clear()
+                                dismiss()
+                                MessageDialogFragment.newInstance(
+                                    R.string.download_failed,
+                                    R.string.download_failed_description
+                                ).show(requireActivity().supportFragmentManager, MessageDialogFragment.TAG)
+                                gamesViewModel.setShouldSwapData(true)
+                            }
+
+                            InstallStatus.Cancelled -> {
+                                downloadViewModel.clear()
+                                dismiss()
+                                MessageDialogFragment.newInstance(
+                                    R.string.download_cancelled,
+                                    R.string.download_cancelled_description
+                                ).show(requireActivity().supportFragmentManager, MessageDialogFragment.TAG)
+                            }
+
+                            // Do nothing on null
+                            else -> {}
+                        }
+                    }
+                }
+            }
+        }
+
+        // Consider using WorkManager here. While the home menu can only really amount to
+        // about 150MBs, this could be a problem on inconsistent networks
+        downloadViewModel.download(titles)
+    }
+
+    override fun onResume() {
+        super.onResume()
+        val alertDialog = dialog as AlertDialog
+        val negativeButton = alertDialog.getButton(Dialog.BUTTON_NEGATIVE)
+        negativeButton.setOnClickListener {
+            downloadViewModel.cancel()
+            dialog?.setTitle(R.string.cancelling)
+            binding.progressBar.isIndeterminate = true
+        }
+    }
+
+    override fun onDestroyView() {
+        super.onDestroyView()
+        _binding = null
+    }
+
+    companion object {
+        const val TAG = "DownloadSystemFilesDialogFragment"
+
+        const val TITLES = "Titles"
+
+        fun newInstance(titles: LongArray): DownloadSystemFilesDialogFragment {
+            val dialog = DownloadSystemFilesDialogFragment()
+            val args = Bundle()
+            args.putLongArray(TITLES, titles)
+            dialog.arguments = args
+            return dialog
+        }
+    }
+}
diff --git a/src/android/app/src/main/java/org/citra/citra_emu/viewmodel/SystemFilesViewModel.kt b/src/android/app/src/main/java/org/citra/citra_emu/viewmodel/SystemFilesViewModel.kt
new file mode 100644
index 000000000..d4f654d5c
--- /dev/null
+++ b/src/android/app/src/main/java/org/citra/citra_emu/viewmodel/SystemFilesViewModel.kt
@@ -0,0 +1,139 @@
+// Copyright 2023 Citra Emulator Project
+// Licensed under GPLv2 or any later version
+// Refer to the license.txt file included.
+
+package org.citra.citra_emu.viewmodel
+
+import androidx.lifecycle.ViewModel
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.Job
+import kotlinx.coroutines.cancelChildren
+import kotlinx.coroutines.delay
+import kotlinx.coroutines.flow.MutableStateFlow
+import kotlinx.coroutines.flow.asStateFlow
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.yield
+import org.citra.citra_emu.NativeLibrary
+import org.citra.citra_emu.NativeLibrary.InstallStatus
+import org.citra.citra_emu.utils.Log
+import java.util.concurrent.atomic.AtomicInteger
+import kotlin.coroutines.CoroutineContext
+import kotlin.math.min
+
+class SystemFilesViewModel : ViewModel() {
+    private var job: Job
+    private val coroutineContext: CoroutineContext
+        get() = Dispatchers.IO + job
+
+    val isDownloading get() = _isDownloading.asStateFlow()
+    private val _isDownloading = MutableStateFlow(false)
+
+    val progress get() = _progress.asStateFlow()
+    private val _progress = MutableStateFlow(0)
+
+    val result get() = _result.asStateFlow()
+    private val _result = MutableStateFlow<InstallStatus?>(null)
+
+    val shouldRefresh get() = _shouldRefresh.asStateFlow()
+    private val _shouldRefresh = MutableStateFlow(false)
+
+    private var cancelled = false
+
+    private val RETRY_AMOUNT = 3
+
+    init {
+        job = Job()
+        clear()
+    }
+
+    fun setShouldRefresh(refresh: Boolean) {
+        _shouldRefresh.value = refresh
+    }
+
+    fun setProgress(progress: Int) {
+        _progress.value = progress
+    }
+
+    fun download(titles: LongArray) {
+        if (isDownloading.value) {
+            return
+        }
+        clear()
+        _isDownloading.value = true
+        Log.debug("System menu download started.")
+
+        val minExecutors = min(Runtime.getRuntime().availableProcessors(), titles.size)
+        val segment = (titles.size / minExecutors)
+        val atomicProgress = AtomicInteger(0)
+        for (i in 0 until minExecutors) {
+            val titlesSegment = if (i < minExecutors - 1) {
+                titles.copyOfRange(i * segment, (i + 1) * segment)
+            } else {
+                titles.copyOfRange(i * segment, titles.size)
+            }
+
+            CoroutineScope(coroutineContext).launch {
+                titlesSegment.forEach { title: Long ->
+                    // Notify UI of cancellation before ending coroutine
+                    if (cancelled) {
+                        _result.value = InstallStatus.ErrorAborted
+                        cancelled = false
+                    }
+
+                    // Takes a moment to see if the coroutine was cancelled
+                    yield()
+
+                    // Retry downloading a title repeatedly
+                    for (j in 0 until RETRY_AMOUNT) {
+                        val result = tryDownloadTitle(title)
+                        if (result == InstallStatus.Success) {
+                            break
+                        } else if (j == RETRY_AMOUNT - 1) {
+                            _result.value = result
+                            return@launch
+                        }
+                        Log.warning("Download for title{$title} failed, retrying in 3s...")
+                        delay(3000L)
+                    }
+
+                    Log.debug("Successfully installed title - $title")
+                    setProgress(atomicProgress.incrementAndGet())
+
+                    Log.debug("System File Progress - ${atomicProgress.get()} / ${titles.size}")
+                    if (atomicProgress.get() == titles.size) {
+                        _result.value = InstallStatus.Success
+                        setShouldRefresh(true)
+                    }
+                }
+            }
+        }
+    }
+
+    private fun tryDownloadTitle(title: Long): InstallStatus {
+        val result = NativeLibrary.downloadTitleFromNus(title)
+        if (result != InstallStatus.Success) {
+            Log.error("Failed to install title $title with error - $result")
+        }
+        return result
+    }
+
+    fun clear() {
+        Log.debug("Clearing")
+        job.cancelChildren()
+        job = Job()
+        _progress.value = 0
+        _result.value = null
+        _isDownloading.value = false
+        cancelled = false
+    }
+
+    fun cancel() {
+        Log.debug("Canceling system file download.")
+        cancelled = true
+        job.cancelChildren()
+        job = Job()
+        _progress.value = 0
+        _result.value = InstallStatus.Cancelled
+    }
+}
diff --git a/src/android/app/src/main/res/layout-w600dp/fragment_system_files.xml b/src/android/app/src/main/res/layout-w600dp/fragment_system_files.xml
new file mode 100644
index 000000000..6c833f876
--- /dev/null
+++ b/src/android/app/src/main/res/layout-w600dp/fragment_system_files.xml
@@ -0,0 +1,219 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/coordinator_about"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="?attr/colorSurface">
+
+    <com.google.android.material.appbar.AppBarLayout
+        android:id="@+id/appbar_about"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:fitsSystemWindows="true">
+
+        <com.google.android.material.appbar.MaterialToolbar
+            android:id="@+id/toolbar_system_files"
+            android:layout_width="match_parent"
+            android:layout_height="?attr/actionBarSize"
+            app:navigationIcon="@drawable/ic_back"
+            app:title="@string/setup_system_files" />
+
+    </com.google.android.material.appbar.AppBarLayout>
+
+    <androidx.core.widget.NestedScrollView
+        android:id="@+id/scroll_system_files"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:fadeScrollbars="false"
+        android:scrollbars="vertical"
+        android:clipToPadding="false"
+        app:layout_behavior="@string/appbar_scrolling_view_behavior">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal">
+
+            <LinearLayout
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_marginHorizontal="24dp"
+                android:orientation="vertical"
+                android:paddingBottom="16dp"
+                android:layout_weight="1">
+
+                <com.google.android.material.textview.MaterialTextView
+                    style="@style/TextAppearance.Material3.TitleSmall"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="16dp"
+                    android:text="@string/download_system_files"
+                    android:textAlignment="viewStart" />
+
+                <com.google.android.material.textfield.TextInputLayout
+                    android:id="@+id/system_type"
+                    style="@style/Widget.Material3.TextInputLayout.OutlinedBox.ExposedDropdownMenu"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="16dp"
+                    android:hint="@string/system_type"
+                    app:layout_constraintTop_toTopOf="parent">
+
+                    <com.google.android.material.textfield.MaterialAutoCompleteTextView
+                        android:id="@+id/dropdown_system_type"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:inputType="none" />
+
+                </com.google.android.material.textfield.TextInputLayout>
+
+                <com.google.android.material.textfield.TextInputLayout
+                    android:id="@+id/system_region"
+                    style="@style/Widget.Material3.TextInputLayout.OutlinedBox.ExposedDropdownMenu"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="16dp"
+                    android:hint="@string/emulated_region"
+                    app:layout_constraintTop_toTopOf="parent">
+
+                    <com.google.android.material.textfield.MaterialAutoCompleteTextView
+                        android:id="@+id/dropdown_system_region"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:inputType="none" />
+
+                </com.google.android.material.textfield.TextInputLayout>
+
+                <Button
+                    android:id="@+id/button_download_home_menu"
+                    style="@style/Widget.Material3.Button.UnelevatedButton"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="16dp"
+                    android:text="@string/download" />
+
+                <com.google.android.material.textview.MaterialTextView
+                    android:id="@+id/text_keys_missing"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="16dp"
+                    android:text="@string/keys_missing"
+                    android:textAlignment="viewStart"
+                    android:visibility="gone" />
+
+                <com.google.android.material.textview.MaterialTextView
+                    android:id="@+id/text_keys_missing_help"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:textAlignment="viewStart"
+                    android:visibility="gone"
+                    tools:text="How to get keys?" />
+
+            </LinearLayout>
+
+            <LinearLayout
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_marginHorizontal="24dp"
+                android:orientation="vertical"
+                android:paddingBottom="16dp"
+                android:layout_weight="1">
+
+                <com.google.android.material.textview.MaterialTextView
+                    style="@style/TextAppearance.Material3.TitleSmall"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="16dp"
+                    android:text="@string/boot_home_menu"
+                    android:textAlignment="viewStart" />
+
+                <com.google.android.material.textfield.TextInputLayout
+                    android:id="@+id/system_region_start"
+                    style="@style/Widget.Material3.TextInputLayout.OutlinedBox.ExposedDropdownMenu"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="16dp"
+                    android:hint="@string/emulated_region"
+                    android:enabled="false"
+                    app:layout_constraintTop_toTopOf="parent">
+
+                    <com.google.android.material.textfield.MaterialAutoCompleteTextView
+                        android:id="@+id/dropdown_system_region_start"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:inputType="none" />
+
+                </com.google.android.material.textfield.TextInputLayout>
+
+                <Button
+                    android:id="@+id/button_start_home_menu"
+                    style="@style/Widget.Material3.Button.UnelevatedButton"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="16dp"
+                    android:enabled="false"
+                    android:text="@string/start" />
+
+                <androidx.constraintlayout.widget.ConstraintLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="16dp">
+
+                    <com.google.android.material.textview.MaterialTextView
+                        android:id="@+id/text_run_system_setup"
+                        android:layout_width="0dp"
+                        android:layout_height="wrap_content"
+                        android:text="@string/run_system_setup"
+                        android:textAlignment="viewStart"
+                        android:layout_marginEnd="16dp"
+                        app:layout_constraintBottom_toBottomOf="parent"
+                        app:layout_constraintEnd_toStartOf="@+id/switch_run_system_setup"
+                        app:layout_constraintStart_toStartOf="parent"
+                        app:layout_constraintTop_toTopOf="parent" />
+
+                    <com.google.android.material.materialswitch.MaterialSwitch
+                        android:id="@+id/switch_run_system_setup"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        app:layout_constraintBottom_toBottomOf="parent"
+                        app:layout_constraintEnd_toEndOf="parent"
+                        app:layout_constraintTop_toTopOf="parent" />
+
+                </androidx.constraintlayout.widget.ConstraintLayout>
+
+                <androidx.constraintlayout.widget.ConstraintLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="16dp">
+
+                    <com.google.android.material.textview.MaterialTextView
+                        android:id="@+id/text_show_apps"
+                        android:layout_width="0dp"
+                        android:layout_height="wrap_content"
+                        android:text="@string/show_home_apps"
+                        android:textAlignment="viewStart"
+                        android:layout_marginEnd="16dp"
+                        app:layout_constraintBottom_toBottomOf="parent"
+                        app:layout_constraintEnd_toStartOf="@+id/switch_show_apps"
+                        app:layout_constraintStart_toStartOf="parent"
+                        app:layout_constraintTop_toTopOf="parent" />
+
+                    <com.google.android.material.materialswitch.MaterialSwitch
+                        android:id="@+id/switch_show_apps"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        app:layout_constraintBottom_toBottomOf="parent"
+                        app:layout_constraintEnd_toEndOf="parent"
+                        app:layout_constraintTop_toTopOf="parent" />
+
+                </androidx.constraintlayout.widget.ConstraintLayout>
+
+            </LinearLayout>
+
+        </LinearLayout>
+
+    </androidx.core.widget.NestedScrollView>
+
+</androidx.coordinatorlayout.widget.CoordinatorLayout>
